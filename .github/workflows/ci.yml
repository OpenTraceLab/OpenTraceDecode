name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/**"
      - "include/**"
      - "meson.build"
      - "meson_options.txt"
      - ".github/workflows/**"
  push:
    branches: [main]
    tags: ['v*']
    paths:
      - "src/**"
      - "include/**"
      - "meson.build"
      - "meson_options.txt"
      - ".github/workflows/**"
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.ref }}
          fetch-depth: 0

      - name: Show build context
        if: github.event_name == 'pull_request'
        run: |
          echo "Building PR #${{ github.event.pull_request.number }}"
          echo "Base: ${{ github.base_ref }}"
          echo "Head: ${{ github.head_ref }}"
          echo "Merge commit: ${{ github.event.pull_request.merge_commit_sha }}"
          git --no-pager log -1 --oneline

      # Linux cache
      - name: Cache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: linux-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: linux-

      # macOS cache
      - name: Cache (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: mac-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: mac-

      # Windows cache
      - name: Cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.ccache
            C:\Users\runneradmin\AppData\Local\meson
          key: win-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: win-

      - name: Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y meson ninja-build pkg-config gcc g++ ccache \
            libglib2.0-dev python3-dev python3-setuptools
          echo "/usr/lib/ccache" >> "$GITHUB_PATH"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: macOS deps
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install meson ninja pkg-config ccache glib python3
          echo "$(brew --prefix ccache)/libexec" >> "$GITHUB_PATH"
          echo "XDG_CACHE_HOME=$HOME/.cache"   >> "$GITHUB_ENV"
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: MSYS2 setup
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-ccache
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-python3

      - name: Build & test (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            PREFIX=/usr/local
          else
            PREFIX=/usr
          fi
          meson setup build --buildtype=release --prefix=$PREFIX
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs

      - name: Build & test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          export CCACHE_DIR=/c/Users/runneradmin/.ccache
          export XDG_CACHE_HOME=/c/Users/runneradmin/AppData/Local
          mkdir -p "$CCACHE_DIR"
          meson setup build --buildtype=release
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs

      - name: Install (Linux/macOS)
        if: runner.os != 'Windows' && startsWith(github.ref, 'refs/tags/v')
        run: |
          DESTDIR="${PWD}/install" meson install -C build
          # Find the actual install prefix by looking for pkgconfig directory
          PKGCONFIG_DIR=$(find install -type d -name pkgconfig | head -1)
          ACTUAL_PREFIX=$(echo $PKGCONFIG_DIR | sed 's|/lib.*/pkgconfig$||' | sed 's|^install||')
          if [ "$RUNNER_OS" = "macOS" ]; then
            PLATFORM="macos"
          else
            PLATFORM="linux"
          fi
          echo "Creating tarball from install$ACTUAL_PREFIX"
          tar czf opentracedecode-${PLATFORM}.tar.gz -C install$ACTUAL_PREFIX .

      - name: Install (Windows)
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        shell: msys2 {0}
        run: |
          DESTDIR="${PWD}/install" meson install -C build
          MINGW_PATH=$(find install -type d -name mingw64 | head -1)
          tar czf opentracedecode-windows.tar.gz -C $MINGW_PATH .

      - name: Upload artifact (Linux)
        if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracedecode-linux
          path: opentracedecode-*.tar.gz

      - name: Upload artifact (macOS)
        if: runner.os == 'macOS' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracedecode-macos
          path: opentracedecode-*.tar.gz

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentracedecode-windows
          path: opentracedecode-*.tar.gz

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: |
            build/meson-logs
            build/meson-private
          if-no-files-found: ignore

  pr-summary:
    needs: build
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Download failure logs
        if: needs.build.result == 'failure'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Create PR summary
        run: |
          if [ "${{ needs.build.result }}" = "failure" ]; then
            echo "## ❌ Build/Test Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more platform builds failed. Check the job logs above for details." >> $GITHUB_STEP_SUMMARY
            find artifacts -type f -name 'testlog.txt' -print -exec echo "### {}" \; -exec tail -n 100 {} \; >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          else
            echo "## ✅ All Checks Passed" >> $GITHUB_STEP_SUMMARY
          fi

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/opentracedecode-*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
