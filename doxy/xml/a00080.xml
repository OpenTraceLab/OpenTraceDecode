<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="a00080" kind="file" language="C++">
    <compoundname>type_decoder.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="a00062" local="yes">libopentracedecode-internal.h</includes>
    <includes local="no">opentracedecode/libopentracedecode.h</includes>
    <includes local="no">inttypes.h</includes>
    <incdepgraph>
      <node id="3">
        <label>libopentracedecode-internal.h</label>
        <link refid="a00062"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/type_decoder.c</label>
        <link refid="a00080"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Python.h</label>
      </node>
      <node id="2">
        <label>config.h</label>
      </node>
      <node id="6">
        <label>inttypes.h</label>
      </node>
      <node id="5">
        <label>opentracedecode/libopentracedecode.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="a00169" prot="public">otd_Decoder</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="a00080_1aea78f6f7f51b7d8df25a97e35e0e8445" prot="public" static="yes" mutable="no">
        <type>PyMethodDef</type>
        <definition>PyMethodDef Decoder_methods[]</definition>
        <argsstring>[]</argsstring>
        <name>Decoder_methods</name>
        <initializer>= {
	{ &quot;put&quot;,
	  Decoder_put, METH_VARARGS,
	  Decoder_put_doc,
	},
	{ &quot;register&quot;,
	  (PyCFunction)(void(*)(void))Decoder_register, METH_VARARGS | METH_KEYWORDS,
	  Decoder_register_doc,
	},
	{ &quot;wait&quot;,
	  Decoder_wait, METH_VARARGS,
	  Decoder_wait_doc,
	},
	{ &quot;has_channel&quot;,
	  Decoder_has_channel, METH_VARARGS,
	  Decoder_has_channel_doc,
	},
	<ref refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" kindref="member">ALL_ZERO</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="1203" column="20" bodyfile="src/type_decoder.c" bodystart="1203" bodyend="1221"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="a00080_1a32836f40cd48533652e96ed567b4c6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> const char *</type>
        <definition>OTD_PRIV const char * output_type_name</definition>
        <argsstring>(unsigned int idx)</argsstring>
        <name>output_type_name</name>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="34" column="21" bodyfile="src/type_decoder.c" bodystart="34" bodyend="46"/>
        <referencedby refid="a00088_1gac32b5d806af220243d84a95c7e655a00" compoundref="a00068" startline="393" endline="411">otd_pd_output_callback_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00080_1aa52f4b91c39ba06a832eedcc4b81ec81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void release_annotation</definition>
        <argsstring>(struct otd_proto_data_annotation *pda)</argsstring>
        <name>release_annotation</name>
        <param>
          <type>struct <ref refid="a00125" kindref="compound">otd_proto_data_annotation</ref> *</type>
          <declname>pda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="48" column="13" bodyfile="src/type_decoder.c" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a80d1d019f623b972d645a2dfc493cc82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int convert_annotation</definition>
        <argsstring>(struct otd_decoder_inst *di, PyObject *obj, struct otd_proto_data *pdata)</argsstring>
        <name>convert_annotation</name>
        <param>
          <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>struct <ref refid="a00121" kindref="compound">otd_proto_data</ref> *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="56" column="12" bodyfile="src/type_decoder.c" bodystart="56" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1adca2469720f6eb6c0acdbaa2ddd93c57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void release_logic</definition>
        <argsstring>(struct otd_proto_data_logic *pdl)</argsstring>
        <name>release_logic</name>
        <param>
          <type>struct <ref refid="a00133" kindref="compound">otd_proto_data_logic</ref> *</type>
          <declname>pdl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="127" column="13" bodyfile="src/type_decoder.c" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a7596793e9f2a8c860014ec0816ac76b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int convert_logic</definition>
        <argsstring>(struct otd_decoder_inst *di, PyObject *obj, struct otd_proto_data *pdata)</argsstring>
        <name>convert_logic</name>
        <param>
          <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>struct <ref refid="a00121" kindref="compound">otd_proto_data</ref> *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="134" column="12" bodyfile="src/type_decoder.c" bodystart="134" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a03b7fe91e1001324b9a975197843c505" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void release_binary</definition>
        <argsstring>(struct otd_proto_data_binary *pdb)</argsstring>
        <name>release_binary</name>
        <param>
          <type>struct <ref refid="a00129" kindref="compound">otd_proto_data_binary</ref> *</type>
          <declname>pdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="210" column="13" bodyfile="src/type_decoder.c" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ade08cf6a2a5af202de1dcd6926f3d5e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int convert_binary</definition>
        <argsstring>(struct otd_decoder_inst *di, PyObject *obj, struct otd_proto_data *pdata)</argsstring>
        <name>convert_binary</name>
        <param>
          <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>struct <ref refid="a00121" kindref="compound">otd_proto_data</ref> *</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="217" column="12" bodyfile="src/type_decoder.c" bodystart="217" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a5f417f08d20b4d1d5a2bf926328ae78d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
        <definition>static struct otd_decoder_inst * otd_sess_inst_find_by_obj</definition>
        <argsstring>(struct otd_session *sess, const GSList *stack, const PyObject *obj)</argsstring>
        <name>otd_sess_inst_find_by_obj</name>
        <param>
          <type>struct <ref refid="a00165" kindref="compound">otd_session</ref> *</type>
          <declname>sess</declname>
        </param>
        <param>
          <type>const GSList *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>const PyObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="293" column="37" bodyfile="src/type_decoder.c" bodystart="293" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1af16b3749a9ea40b196f16b11ffa5a9c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
        <definition>static struct otd_decoder_inst * otd_inst_find_by_obj</definition>
        <argsstring>(const GSList *stack, const PyObject *obj)</argsstring>
        <name>otd_inst_find_by_obj</name>
        <param>
          <type>const GSList *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>const PyObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Find a decoder instance by its Python object. </para>
        </briefdescription>
        <detaileddescription>
<para>I.e. find that instance&apos;s instantiation of the opentracedecode.Decoder class. This will recurse to find the instance anywhere in the stack tree of all sessions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GSList of struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref>, indicating the stack to search. To start searching at the bottom level of decoder instances, pass NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python class instantiation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref>, or NULL if not found.</para>
</simplesect>
<simplesect kind="since"><para>0.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="330" column="37" bodyfile="src/type_decoder.c" bodystart="330" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1ab030d27ec2c0fd28e4bf63e0d5a01002" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int convert_meta</definition>
        <argsstring>(struct otd_proto_data *pdata, PyObject *obj)</argsstring>
        <name>convert_meta</name>
        <param>
          <type>struct <ref refid="a00121" kindref="compound">otd_proto_data</ref> *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="352" column="12" bodyfile="src/type_decoder.c" bodystart="352" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a104432005f3e47a9c87cccc3f29e3ee7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void release_meta</definition>
        <argsstring>(GVariant *gvar)</argsstring>
        <name>release_meta</name>
        <param>
          <type>GVariant *</type>
          <declname>gvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="392" column="13" bodyfile="src/type_decoder.c" bodystart="392" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyDoc_STRVAR</definition>
        <argsstring>(Decoder_put_doc, &quot;Put an annotation for the specified span of samples.\n&quot; &quot;\n&quot; &quot;Arguments: start and end sample number, stream id, annotation data.\n&quot; &quot;Annotation data&apos;s layout depends on the output stream type.&quot;)</argsstring>
        <name>PyDoc_STRVAR</name>
        <param>
          <type>Decoder_put_doc</type>
        </param>
        <param>
          <type>&quot;Put an annotation for the specified span of samples.\n&quot; &quot;\n&quot; &quot;Arguments: start and end sample</type>
          <declname>number</declname>
        </param>
        <param>
          <type>stream</type>
          <declname>id</declname>
        </param>
        <param>
          <type>annotation data.\n&quot; &quot;Annotation data &apos;s layout depends on the output stream type.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="399" column="1" declfile="src/type_decoder.c" declline="399" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a19096e810c7a67fd9848ffa047d9e452" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * Decoder_put</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>Decoder_put</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="406" column="17" bodyfile="src/type_decoder.c" bodystart="406" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a0260215ecc5e5fcca2a561b79994432b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyDoc_STRVAR</definition>
        <argsstring>(Decoder_register_doc, &quot;Register a new output stream.&quot;)</argsstring>
        <name>PyDoc_STRVAR</name>
        <param>
          <type>Decoder_register_doc</type>
        </param>
        <param>
          <type>&quot;Register a new output stream.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="564" column="1" declfile="src/type_decoder.c" declline="564" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1af799202c65a9490dde3d4dbcfb9a012b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * Decoder_register</definition>
        <argsstring>(PyObject *self, PyObject *args, PyObject *kwargs)</argsstring>
        <name>Decoder_register</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="568" column="17" bodyfile="src/type_decoder.c" bodystart="568" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a48684ad5a5d404baccc64b6f8b1ff7b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get_term_type</definition>
        <argsstring>(const char *v)</argsstring>
        <name>get_term_type</name>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="670" column="12" bodyfile="src/type_decoder.c" bodystart="670" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a7c86f1b43917b11b745706256937f4b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * get_current_pinvalues</definition>
        <argsstring>(const struct otd_decoder_inst *di)</argsstring>
        <name>get_current_pinvalues</name>
        <param>
          <type>const struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <briefdescription>
<para>Get the pin values at the current sample number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>di</parametername>
</parameternamelist>
<parameterdescription>
<para>The decoder instance to use. Must not be NULL. The number of channels must be &gt;= 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated PyTuple containing the pin values at the current sample number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="701" column="17" bodyfile="src/type_decoder.c" bodystart="701" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a1a9f27ae5ff31aeb2ddfb1b0b457705e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int create_term_list</definition>
        <argsstring>(struct otd_decoder_inst *di, PyObject *py_dict, GSList **term_list)</argsstring>
        <name>create_term_list</name>
        <param>
          <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>py_dict</declname>
        </param>
        <param>
          <type>GSList **</type>
          <declname>term_list</declname>
        </param>
        <briefdescription>
<para>Create a list of terms in the specified condition. </para>
        </briefdescription>
        <detaileddescription>
<para>If there are no terms in the condition, &apos;term_list&apos; will be NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>di</parametername>
</parameternamelist>
<parameterdescription>
<para>The decoder instance to use. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py_dict</parametername>
</parameternamelist>
<parameterdescription>
<para>A Python dict containing terms. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GSList which will be set to the newly created list of terms. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a negative error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="750" column="12" bodyfile="src/type_decoder.c" bodystart="750" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a899cc2cf7bcc0d22df92ccb10a54aedb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int set_new_condition_list</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>set_new_condition_list</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Replace the current condition list with the new one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>OTD_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The new condition list was set successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OTD_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error setting the new condition list. The contents of di-&gt;condition_list are undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>9999</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="827" column="12" bodyfile="src/type_decoder.c" bodystart="827" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a59a90fa76883c1b0a378403a55e1ab48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int set_skip_condition</definition>
        <argsstring>(struct otd_decoder_inst *di, uint64_t count)</argsstring>
        <name>set_skip_condition</name>
        <param>
          <type>struct <ref refid="a00113" kindref="compound">otd_decoder_inst</ref> *</type>
          <declname>di</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Create a SKIP condition list for condition-less .wait() calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>di</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples to skip.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>OTD_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The new condition list was set successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OTD_ERR</parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error setting the new condition list. The contents of di-&gt;condition_list are undefined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This routine is a reduced and specialized version of the set_new_condition_list() and create_term_list() routines which gets invoked when .wait() was called without specifications for conditions. This minor duplication of the SKIP term list creation simplifies the logic and avoids the creation of expensive Python objects with &quot;constant&quot; values which the caller did not pass in the first place. It results in maximum sharing of match handling code paths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="950" column="12" bodyfile="src/type_decoder.c" bodystart="950" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a5500c6975f291424482ae4900bbc86d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyDoc_STRVAR</definition>
        <argsstring>(Decoder_wait_doc, &quot;Wait for one or more conditions to occur.\n&quot; &quot;\n&quot; &quot;Returns the sample data at the next position where the condition\n&quot; &quot;is seen. When the optional condition is missing or empty, the next\n&quot; &quot;sample number is used. The condition can be a dictionary with one\n&quot; &quot;condition&apos;s details, or a list of dictionaries specifying multiple\n&quot; &quot;conditions of which at least one condition must be true. Dicts can\n&quot; &quot;contain one or more key/value pairs, all of which must be true for\n&quot; &quot;the dict&apos;s condition to be considered true. The key either is a\n&quot; &quot;channel index or a keyword, the value is the operation&apos;s parameter.\n&quot; &quot;\n&quot; &quot;Supported parameters for channel number keys: &apos;h&apos;, &apos;l&apos;, &apos;r&apos;, &apos;f&apos;,\n&quot; &quot;or &apos;e&apos; for level or edge conditions. Other supported keywords:\n&quot; &quot;&apos;skip&apos; to advance over the given number of samples.\n&quot;)</argsstring>
        <name>PyDoc_STRVAR</name>
        <param>
          <type>Decoder_wait_doc</type>
        </param>
        <param>
          <type>&quot;Wait for one or more conditions to occur.\n&quot; &quot;\n&quot; &quot;Returns the sample data at the next position where the condition\n&quot; &quot;is seen. When the optional condition is missing or</type>
          <declname>empty</declname>
        </param>
        <param>
          <type>the next\n&quot; &quot;sample number is used. The condition can be a dictionary with one\n&quot; &quot;condition &apos;s</type>
          <declname>details</declname>
        </param>
        <param>
          <type>or a list of dictionaries specifying multiple\n&quot; &quot;conditions of which at least one condition must be true. Dicts can\n&quot; &quot;contain one or more key/value</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>all of which must be true for\n&quot; &quot;the dict &apos;s condition to be considered true. The key either is a\n&quot; &quot;channel index or a</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>the value is the operation &apos;s parameter.\n&quot; &quot;\n&quot; &quot;Supported parameters for channel number keys:&apos;h&apos;</type>
        </param>
        <param>
          <type>&apos;l&apos;</type>
        </param>
        <param>
          <type>&apos;r&apos;</type>
        </param>
        <param>
          <type>&apos;f&apos;</type>
        </param>
        <param>
          <type>\n&quot; &quot;or &apos;e&apos; for level or edge conditions. Other supported keywords:\n&quot; &quot; &apos;skip&apos; to advance over the given number of samples.\n&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="966" column="1" declfile="src/type_decoder.c" declline="966" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a70f0f0c64e41aef2c515a5953f28983d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * Decoder_wait</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>Decoder_wait</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="983" column="17" bodyfile="src/type_decoder.c" bodystart="983" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a1108ee813fc6db469aae7e005eff6b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyDoc_STRVAR</definition>
        <argsstring>(Decoder_has_channel_doc, &quot;Check whether input data is supplied for a given channel.\n&quot; &quot;\n&quot; &quot;Argument: A channel index.\n&quot; &quot;Returns: A boolean, True if the channel is connected,\n&quot; &quot;False if the channel is open (won&apos;t see any input data).\n&quot;)</argsstring>
        <name>PyDoc_STRVAR</name>
        <param>
          <type>Decoder_has_channel_doc</type>
        </param>
        <param>
          <type>&quot;Check whether <ref refid="a00023_1a71b71204fb4bf60b3d9c535918c879ff" kindref="member">input</ref> data is supplied for a given channel.\n&quot; &quot;\n&quot; &quot;Argument: A channel index.\n&quot; &quot;Returns: A</type>
          <declname>boolean</declname>
        </param>
        <param>
          <type>True if the channel is</type>
          <declname>connected</declname>
        </param>
        <param>
          <type>\n&quot; &quot;False if the channel is open(won &apos;t see any <ref refid="a00023_1a71b71204fb4bf60b3d9c535918c879ff" kindref="member">input</ref> data).\n&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="1137" column="1" declfile="src/type_decoder.c" declline="1137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1aad20783b3279f9006b8540e2dde9acad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyObject *</type>
        <definition>static PyObject * Decoder_has_channel</definition>
        <argsstring>(PyObject *self, PyObject *args)</argsstring>
        <name>Decoder_has_channel</name>
        <param>
          <type>PyObject *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Return whether the specified channel was supplied to the decoder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Py_True</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel has been supplied by the frontend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Py_False</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel has been supplied by the frontend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="1155" column="17" bodyfile="src/type_decoder.c" bodystart="1155" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1abac60368e3459ef7abdef8c18afa5080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyDoc_STRVAR</definition>
        <argsstring>(Decoder_doc, &quot;sigrok Decoder base class&quot;)</argsstring>
        <name>PyDoc_STRVAR</name>
        <param>
          <type>Decoder_doc</type>
        </param>
        <param>
          <type>&quot;sigrok Decoder base class&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="1201" column="1" declfile="src/type_decoder.c" declline="1201" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00080_1a4fad07f52157e88c715590c8b7e8778b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> PyObject *</type>
        <definition>OTD_PRIV PyObject * otd_Decoder_type_new</definition>
        <argsstring>(void)</argsstring>
        <name>otd_Decoder_type_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create the opentracedecode.Decoder type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The new type object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/type_decoder.c" line="1230" column="19" bodyfile="src/type_decoder.c" bodystart="1230" bodyend="1255"/>
        <references refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" compoundref="a00062" startline="38">ALL_ZERO</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>libopentracedecode<sp/>project.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Bert<sp/>Vermeulen<sp/>&lt;bert@biot.com&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="a00062" kindref="compound">libopentracedecode-internal.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>First,<sp/>so<sp/>we<sp/>avoid<sp/>a<sp/>_POSIX_C_SOURCE<sp/>warning.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opentracedecode/libopentracedecode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">/**<sp/>@cond<sp/>PRIVATE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>GSList<sp/>*sessions;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">/**<sp/>@endcond<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/>otd_Decoder;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>only<sp/>used<sp/>for<sp/>nicer<sp/>otd_dbg()<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="a00062_1a32836f40cd48533652e96ed567b4c6c5" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="a00080_1a32836f40cd48533652e96ed567b4c6c5" kindref="member">output_type_name</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*names[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OUTPUT_ANN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OUTPUT_PYTHON&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OUTPUT_BINARY&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OUTPUT_LOGIC&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OUTPUT_META&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(invalid)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names[MIN(idx,<sp/>G_N_ELEMENTS(names)<sp/>-<sp/>1)];</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release_annotation(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00125" kindref="compound">otd_proto_data_annotation</ref><sp/>*pda)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pda)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pda-&gt;<ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_strfreev(pda-&gt;<ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convert_annotation(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>PyObject<sp/>*obj,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00121" kindref="compound">otd_proto_data</ref><sp/>*pdata)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_tmp;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00117" kindref="compound">otd_pd_output</ref><sp/>*pdo;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00125" kindref="compound">otd_proto_data_annotation</ref><sp/>*pda;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>be<sp/>a<sp/>list<sp/>of<sp/>[annotation<sp/>class,<sp/>[string,<sp/>...]].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(obj))<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>an<sp/>annotation<sp/>that<sp/>is<sp/>not<sp/>a<sp/>list&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>have<sp/>2<sp/>elements.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyList_Size(obj)<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>sz<sp/>=<sp/>PyList_Size(obj);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>annotation<sp/>list<sp/>with<sp/>%zd<sp/>elements<sp/>instead<sp/>of<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/>sz);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>first<sp/>element<sp/>should<sp/>be<sp/>an<sp/>integer<sp/>matching<sp/>a<sp/>previously</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>registered<sp/>annotation<sp/>class.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyLong_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>annotation<sp/>list,<sp/>but<sp/>first<sp/>element<sp/>was<sp/>not<sp/>an<sp/>integer.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref><sp/>=<sp/>PyLong_AsLong(py_tmp);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pdo<sp/>=<sp/>g_slist_nth_data(di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1a954903cd8fc70507645b86518b4ec859" kindref="member">annotations</ref>,<sp/><ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>data<sp/>to<sp/>unregistered<sp/>annotation<sp/>class<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/><ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Second<sp/>element<sp/>must<sp/>be<sp/>a<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>annotation<sp/>list,<sp/>but<sp/>second<sp/>element<sp/>was<sp/>not<sp/>a<sp/>list.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" kindref="member">py_strseq_to_char</ref>(py_tmp,<sp/>&amp;<ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref>)<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>annotation<sp/>list,<sp/>but<sp/>second<sp/>element<sp/>was<sp/>malformed.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pda<sp/>=<sp/>pdata-&gt;<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pda-&gt;<ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref><sp/>=<sp/><ref refid="a00125_1a5b4182bbec3950bbf9ad11f5c6ec984c" kindref="member">ann_class</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pda-&gt;<ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref><sp/>=<sp/><ref refid="a00125_1a708aef2a2cc853a69efeeb7ba38fbfb8" kindref="member">ann_text</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release_logic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00133" kindref="compound">otd_proto_data_logic</ref><sp/>*pdl)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pdl)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pdl-&gt;<ref refid="a00133_1a192b4fc500555ad69d684ab0ac916a41" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convert_logic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>PyObject<sp/>*obj,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00121" kindref="compound">otd_proto_data</ref><sp/>*pdata)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00133" kindref="compound">otd_proto_data_logic</ref><sp/>*pdl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_tmp;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*group_name,<sp/>*buf;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>be<sp/>a<sp/>list<sp/>of<sp/>[logic<sp/>group,<sp/>bytes].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(obj))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>non-list<sp/>for<sp/>OTD_OUTPUT_LOGIC.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>have<sp/>2<sp/>elements.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyList_Size(obj)<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_LOGIC<sp/>list<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>%zd<sp/>elements<sp/>instead<sp/>of<sp/>2&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyList_Size(obj));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>element<sp/>should<sp/>be<sp/>an<sp/>integer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyLong_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_LOGIC<sp/>list,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>first<sp/>element<sp/>was<sp/>not<sp/>an<sp/>integer.&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref><sp/>=<sp/>PyLong_AsLong(py_tmp);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(group_name<sp/>=<sp/>g_slist_nth_data(di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1aff2c0530f7a02a3e27fe77d8f68e7a88" kindref="member">logic_output_channels</ref>,<sp/><ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_LOGIC<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unregistered<sp/>logic<sp/>group<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/><ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Second<sp/>element<sp/>should<sp/>be<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyBytes_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_LOGIC<sp/>list,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>second<sp/>element<sp/>was<sp/>not<sp/>bytes.&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Consider<sp/>an<sp/>empty<sp/>set<sp/>of<sp/>bytes<sp/>a<sp/>bug.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyBytes_Size(py_tmp)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_LOGIC<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>empty<sp/>data<sp/>set.&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyBytes_AsStringAndSize(py_tmp,<sp/>&amp;buf,<sp/>&amp;size)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdl<sp/>=<sp/>pdata-&gt;<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdl-&gt;<ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref><sp/>=<sp/><ref refid="a00133_1a04bf3fd3b3c4162efcd72414df15bbe0" kindref="member">logic_group</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pdl-&gt;repeat_count<sp/>is<sp/>set<sp/>by<sp/>the<sp/>caller<sp/>as<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>sample<sp/>range<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pdl-&gt;<ref refid="a00133_1a192b4fc500555ad69d684ab0ac916a41" kindref="member">data</ref><sp/>=<sp/>g_try_malloc(size)))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcabe3955617912cc0e8c0bd3f5e6f62bf7" kindref="member">OTD_ERR_MALLOC</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pdl-&gt;<ref refid="a00133_1a192b4fc500555ad69d684ab0ac916a41" kindref="member">data</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)buf,<sp/>size);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release_binary(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00129" kindref="compound">otd_proto_data_binary</ref><sp/>*pdb)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pdb)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pdb-&gt;<ref refid="a00129_1aae4589e82ffd01ba2bee00af7159a396" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convert_binary(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>PyObject<sp/>*obj,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00121" kindref="compound">otd_proto_data</ref><sp/>*pdata)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00129" kindref="compound">otd_proto_data_binary</ref><sp/>*pdb;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_tmp;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/><ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*class_name,<sp/>*buf;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>be<sp/>a<sp/>list<sp/>of<sp/>[binary<sp/>class,<sp/>bytes].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(obj))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>non-list<sp/>for<sp/>OTD_OUTPUT_BINARY.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>have<sp/>2<sp/>elements.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyList_Size(obj)<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>sz<sp/>=<sp/>PyList_Size(obj);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_BINARY<sp/>list<sp/>with<sp/>%zd<sp/>elements<sp/>instead<sp/>of<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/>sz);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>element<sp/>should<sp/>be<sp/>an<sp/>integer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>0);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyLong_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_BINARY<sp/>list,<sp/>but<sp/>first<sp/>element<sp/>was<sp/>not<sp/>an<sp/>integer.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref><sp/>=<sp/>PyLong_AsLong(py_tmp);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(class_name<sp/>=<sp/>g_slist_nth_data(di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1aff759e252ba8a96a667929d9a1f5e115" kindref="member">binary</ref>,<sp/><ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_BINARY<sp/>with<sp/>unregistered<sp/>binary<sp/>class<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/><ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Second<sp/>element<sp/>should<sp/>be<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_tmp<sp/>=<sp/>PyList_GetItem(obj,<sp/>1);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyBytes_Check(py_tmp))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_BINARY<sp/>list,<sp/>but<sp/>second<sp/>element<sp/>was<sp/>not<sp/>bytes.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Consider<sp/>an<sp/>empty<sp/>set<sp/>of<sp/>bytes<sp/>a<sp/>bug.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyBytes_Size(py_tmp)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>OTD_OUTPUT_BINARY<sp/>with<sp/>empty<sp/>data<sp/>set.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyBytes_AsStringAndSize(py_tmp,<sp/>&amp;buf,<sp/>&amp;<ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref>)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdb<sp/>=<sp/>pdata-&gt;<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdb-&gt;<ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref><sp/>=<sp/><ref refid="a00129_1a2ef1c5f82c6675d0ae0fbec75d76ec00" kindref="member">bin_class</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdb-&gt;<ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref><sp/>=<sp/><ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pdb-&gt;<ref refid="a00129_1aae4589e82ffd01ba2bee00af7159a396" kindref="member">data</ref><sp/>=<sp/>g_try_malloc(pdb-&gt;<ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref>)))</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcabe3955617912cc0e8c0bd3f5e6f62bf7" kindref="member">OTD_ERR_MALLOC</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)pdb-&gt;<ref refid="a00129_1aae4589e82ffd01ba2bee00af7159a396" kindref="member">data</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)buf,<sp/>pdb-&gt;<ref refid="a00129_1a560824dc8e1b8a158f33c9b48409e161" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*otd_sess_inst_find_by_obj(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00165" kindref="compound">otd_session</ref><sp/>*<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GSList<sp/>*stack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PyObject<sp/>*obj)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GSList<sp/>*l;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*tmp,<sp/>*di;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>stack<sp/>?<sp/>stack<sp/>:<sp/><ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>-&gt;di_list;<sp/>di<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>l<sp/>!=<sp/>NULL;<sp/>l<sp/>=<sp/>l-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>l-&gt;data;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref><sp/>==<sp/>obj)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp-&gt;<ref refid="a00113_1a0513a08c7294e76850febc56ba372187" kindref="member">next_di</ref>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>otd_sess_inst_find_by_obj(<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>tmp-&gt;<ref refid="a00113_1a0513a08c7294e76850febc56ba372187" kindref="member">next_di</ref>,<sp/>obj);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>di;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>Find<sp/>a<sp/>decoder<sp/>instance<sp/>by<sp/>its<sp/>Python<sp/>object.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>I.e.<sp/>find<sp/>that<sp/>instance&apos;s<sp/>instantiation<sp/>of<sp/>the<sp/>opentracedecode.Decoder<sp/>class.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>This<sp/>will<sp/>recurse<sp/>to<sp/>find<sp/>the<sp/>instance<sp/>anywhere<sp/>in<sp/>the<sp/>stack<sp/>tree<sp/>of<sp/>all</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>sessions.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param<sp/>stack<sp/>Pointer<sp/>to<sp/>a<sp/>GSList<sp/>of<sp/>struct<sp/>otd_decoder_inst,<sp/>indicating<sp/>the</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>to<sp/>search.<sp/>To<sp/>start<sp/>searching<sp/>at<sp/>the<sp/>bottom<sp/>level<sp/>of</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoder<sp/>instances,<sp/>pass<sp/>NULL.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param<sp/>obj<sp/>The<sp/>Python<sp/>class<sp/>instantiation.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>struct<sp/>otd_decoder_inst,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@since<sp/>0.1.0</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*otd_inst_find_by_obj(</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GSList<sp/>*stack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PyObject<sp/>*obj)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00165" kindref="compound">otd_session</ref><sp/>*sess;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*l;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Performance<sp/>shortcut:<sp/>Handle<sp/>the<sp/>most<sp/>common<sp/>case<sp/>first.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sess<sp/>=<sp/>sessions-&gt;data;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>sess-&gt;<ref refid="a00165_1a5e1296e48d6a16e2a5fe2a574e9d93cc" kindref="member">di_list</ref>-&gt;data;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref><sp/>==<sp/>obj)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>di;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>sessions;<sp/>di<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>l<sp/>!=<sp/>NULL;<sp/>l<sp/>=<sp/>l-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sess<sp/>=<sp/>l-&gt;data;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>otd_sess_inst_find_by_obj(sess,<sp/>stack,<sp/>obj);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>di;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convert_meta(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00121" kindref="compound">otd_proto_data</ref><sp/>*pdata,<sp/>PyObject<sp/>*obj)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>intvalue;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dvalue;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_variant_type_equal(pdata-&gt;<ref refid="a00121_1a28c39d4182b8716c55549822559a561c" kindref="member">pdo</ref>-&gt;<ref refid="a00117_1a03e4f0f029e1f21a9e1b8cb9f0b0b41d" kindref="member">meta_type</ref>,<sp/>G_VARIANT_TYPE_INT64))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyLong_Check(obj))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>output<sp/>was<sp/>registered<sp/>as<sp/>&apos;int&apos;,<sp/>but<sp/>something<sp/>else<sp/>was<sp/>passed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intvalue<sp/>=<sp/>PyLong_AsLongLong(obj);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>g_variant_new_int64(intvalue);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_variant_type_equal(pdata-&gt;<ref refid="a00121_1a28c39d4182b8716c55549822559a561c" kindref="member">pdo</ref>-&gt;<ref refid="a00117_1a03e4f0f029e1f21a9e1b8cb9f0b0b41d" kindref="member">meta_type</ref>,<sp/>G_VARIANT_TYPE_DOUBLE))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyFloat_Check(obj))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>output<sp/>was<sp/>registered<sp/>as<sp/>&apos;float&apos;,<sp/>but<sp/>something<sp/>else<sp/>was<sp/>passed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvalue<sp/>=<sp/>PyFloat_AsDouble(obj);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>g_variant_new_double(dvalue);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release_meta(GVariant<sp/>*gvar)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gvar)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_variant_unref(gvar);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" refkind="member"><highlight class="normal"><ref refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" kindref="member">PyDoc_STRVAR</ref>(Decoder_put_doc,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Put<sp/>an<sp/>annotation<sp/>for<sp/>the<sp/>specified<sp/>span<sp/>of<sp/>samples.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Arguments:<sp/>start<sp/>and<sp/>end<sp/>sample<sp/>number,<sp/>stream<sp/>id,<sp/>annotation<sp/>data.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Annotation<sp/>data&apos;s<sp/>layout<sp/>depends<sp/>on<sp/>the<sp/>output<sp/>stream<sp/>type.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*Decoder_put(PyObject<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*l;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_data,<sp/>*py_res;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>*<ref refid="a00113_1a0513a08c7294e76850febc56ba372187" kindref="member">next_di</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00117" kindref="compound">otd_pd_output</ref><sp/>*pdo;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00121" kindref="compound">otd_proto_data</ref><sp/>pdata;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00125" kindref="compound">otd_proto_data_annotation</ref><sp/>pda;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00129" kindref="compound">otd_proto_data_binary</ref><sp/>pdb;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00133" kindref="compound">otd_proto_data_logic</ref><sp/>pdl;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>start_sample,<sp/>end_sample;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_id;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00137" kindref="compound">otd_pd_callback</ref><sp/>*<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(di<sp/>=<sp/>otd_inst_find_by_obj(NULL,<sp/>self)))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shouldn&apos;t<sp/>happen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;put():<sp/>self<sp/>instance<sp/>not<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;KKiO&quot;</highlight><highlight class="normal">,<sp/>&amp;start_sample,<sp/>&amp;end_sample,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;output_id,<sp/>&amp;py_data))<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>throws<sp/>an<sp/>exception,<sp/>but<sp/>by<sp/>returning<sp/>NULL<sp/>here<sp/>we<sp/>let</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Python<sp/>raise<sp/>it.<sp/>This<sp/>results<sp/>in<sp/>a<sp/>much<sp/>better<sp/>trace<sp/>in</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>controller.c<sp/>on<sp/>the<sp/>decode()<sp/>method<sp/>call.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(l<sp/>=<sp/>g_slist_nth(di-&gt;<ref refid="a00113_1a26a270791d5d906dd7e771a9a92843c9" kindref="member">pd_output</ref>,<sp/>output_id)))<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>invalid<sp/>output<sp/>ID<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/>output_id);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo<sp/>=<sp/>l-&gt;data;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Upon<sp/>OTD_OUTPUT_PYTHON<sp/>for<sp/>stacked<sp/>PDs,<sp/>we<sp/>have<sp/>a<sp/>nicer<sp/>log<sp/>message<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref><sp/>!=<sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2da4363601f92e85bba9a8f76a4ac6757ea" kindref="member">OTD_OUTPUT_PYTHON</ref><sp/>&amp;&amp;<sp/>di-&gt;<ref refid="a00113_1a0513a08c7294e76850febc56ba372187" kindref="member">next_di</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a94b251bb20a6a503383239e41781b8e8" kindref="member">otd_spew</ref>(</highlight><highlight class="stringliteral">&quot;Instance<sp/>%s<sp/>put<sp/>%&quot;</highlight><highlight class="normal"><sp/>PRIu64<sp/></highlight><highlight class="stringliteral">&quot;-%&quot;</highlight><highlight class="normal"><sp/>PRIu64<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>on<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;oid<sp/>%d<sp/>(%s).&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>start_sample,<sp/>end_sample,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00080_1a32836f40cd48533652e96ed567b4c6c5" kindref="member">output_type_name</ref>(pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>),<sp/>output_id,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1ade6ffbe939e54a453d7874b76d5c02f2" kindref="member">start_sample</ref><sp/>=<sp/>start_sample;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1aec5560fb1ff92563b7387556f20a48b7" kindref="member">end_sample</ref><sp/>=<sp/>end_sample;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a28c39d4182b8716c55549822559a561c" kindref="member">pdo</ref><sp/>=<sp/>pdo;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2daae1f4f3c95d8d9aae78f63327847274b" kindref="member">OTD_OUTPUT_ANN</ref>:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Annotations<sp/>are<sp/>only<sp/>fed<sp/>to<sp/>callbacks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref><sp/>=<sp/><ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(di-&gt;<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>&amp;pda;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>from<sp/>PyDict<sp/>to<sp/>otd_proto_data_annotation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert_annotation(di,<sp/>py_data,<sp/>&amp;pdata)<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>error<sp/>was<sp/>already<sp/>logged.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb(&amp;pdata,<sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb_data);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_annotation(pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2da4363601f92e85bba9a8f76a4ac6757ea" kindref="member">OTD_OUTPUT_PYTHON</ref>:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/>di-&gt;<ref refid="a00113_1a0513a08c7294e76850febc56ba372187" kindref="member">next_di</ref>;<sp/>l;<sp/>l<sp/>=<sp/>l-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_di<sp/>=<sp/>l-&gt;data;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a94b251bb20a6a503383239e41781b8e8" kindref="member">otd_spew</ref>(</highlight><highlight class="stringliteral">&quot;Instance<sp/>%s<sp/>put<sp/>%&quot;</highlight><highlight class="normal"><sp/>PRIu64<sp/></highlight><highlight class="stringliteral">&quot;-%&quot;</highlight><highlight class="normal"><sp/>PRIu64<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;on<sp/>oid<sp/>%d<sp/>(%s)<sp/>to<sp/>instance<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_sample,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_sample,<sp/><ref refid="a00080_1a32836f40cd48533652e96ed567b4c6c5" kindref="member">output_type_name</ref>(pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_id,<sp/>pdo-&gt;<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>,<sp/>next_di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_res<sp/>=<sp/>PyObject_CallMethod(next_di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref>,<sp/></highlight><highlight class="stringliteral">&quot;decode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;KKO&quot;</highlight><highlight class="normal">,<sp/>start_sample,<sp/>end_sample,<sp/>py_data);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_res)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Calling<sp/>%s<sp/>decode()<sp/>failed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(py_res);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref><sp/>=<sp/><ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(di-&gt;<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Frontends<sp/>aren&apos;t<sp/>really<sp/>supposed<sp/>to<sp/>get<sp/>Python</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>callbacks,<sp/>but<sp/>it&apos;s<sp/>useful<sp/>for<sp/>testing.</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>py_data;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb(&amp;pdata,<sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb_data);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2dae9a8b982c0f77f81f80ecea2b61d9697" kindref="member">OTD_OUTPUT_BINARY</ref>:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref><sp/>=<sp/><ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(di-&gt;<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>&amp;pdb;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>from<sp/>PyDict<sp/>to<sp/>otd_proto_data_binary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert_binary(di,<sp/>py_data,<sp/>&amp;pdata)<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>error<sp/>was<sp/>already<sp/>logged.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb(&amp;pdata,<sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb_data);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_binary(pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2daa1c49bfb55f9940f79f42c52b20c4689" kindref="member">OTD_OUTPUT_LOGIC</ref>:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref><sp/>=<sp/><ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(di-&gt;<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref><sp/>=<sp/>&amp;pdl;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>from<sp/>PyDict<sp/>to<sp/>otd_proto_data_logic.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert_logic(di,<sp/>py_data,<sp/>&amp;pdata)<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>error<sp/>was<sp/>already<sp/>logged.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_sample<sp/>&lt;=<sp/>start_sample)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Ignored<sp/>OTD_OUTPUT_LOGIC<sp/>with<sp/>invalid<sp/>sample<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdl.<ref refid="a00133_1aaf9fbd38d002f505de66dfc67a44b565" kindref="member">repeat_count</ref><sp/>=<sp/>(end_sample<sp/>-<sp/>start_sample)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb(&amp;pdata,<sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb_data);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_logic(pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2dae610de52e15b25d64039ea58f961aeef" kindref="member">OTD_OUTPUT_META</ref>:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref><sp/>=<sp/><ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(di-&gt;<ref refid="a00113_1a8f310ba6956102b88003d3e7a433f2ef" kindref="member">sess</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Annotations<sp/>need<sp/>converting<sp/>from<sp/>PyObject.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert_meta(&amp;pdata,<sp/>py_data)<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>exception<sp/>was<sp/>already<sp/>set<sp/>up.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb(&amp;pdata,<sp/><ref refid="a00137_1abafc61744ecdc1d64190587ebbb13f2f" kindref="member">cb</ref>-&gt;cb_data);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_meta(pdata.<ref refid="a00121_1a8b96fc5bce291995ea6b2cc47cefc174" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Protocol<sp/>decoder<sp/>%s<sp/>submitted<sp/>invalid<sp/>output<sp/>type<sp/>%d.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1ad71875a3a5881d5693711ff6042c029d" kindref="member">name</ref>,<sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="a00080_1a0260215ecc5e5fcca2a561b79994432b" refkind="member"><highlight class="normal"><ref refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" kindref="member">PyDoc_STRVAR</ref>(Decoder_register_doc,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Register<sp/>a<sp/>new<sp/>output<sp/>stream.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*Decoder_register(PyObject<sp/>*self,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kwargs)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00117" kindref="compound">otd_pd_output</ref><sp/>*pdo;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_new_output_id;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTypeObject<sp/>*meta_type_py;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GVariantType<sp/>*meta_type_gv;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>,<sp/>*<ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref>,<sp/>*<ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*keywords[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;output_type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;proto_id&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;meta&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gboolean<sp/>is_meta;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*l;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00117" kindref="compound">otd_pd_output</ref><sp/>*cmp;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meta_type_py<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meta_type_gv<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref><sp/>=<sp/><ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref><sp/>=<sp/>otd_inst_find_by_obj(NULL,<sp/>self)))<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_Exception,<sp/></highlight><highlight class="stringliteral">&quot;decoder<sp/>instance<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>to<sp/>instance<sp/>ID,<sp/>which<sp/>defaults<sp/>to<sp/>class<sp/>ID.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref><sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTupleAndKeywords(args,<sp/>kwargs,<sp/></highlight><highlight class="stringliteral">&quot;i|s(Oss)&quot;</highlight><highlight class="normal">,<sp/>keywords,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>,<sp/>&amp;<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;meta_type_py,<sp/>&amp;<ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref>,<sp/>&amp;<ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref>))<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>Python<sp/>raise<sp/>this<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>meta<sp/>value&apos;s<sp/>type<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_meta<sp/>=<sp/><ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref><sp/>==<sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2dae610de52e15b25d64039ea58f961aeef" kindref="member">OTD_OUTPUT_META</ref>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_meta)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(meta_type_py<sp/>==<sp/>&amp;PyLong_Type)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meta_type_gv<sp/>=<sp/>G_VARIANT_TYPE_INT64;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(meta_type_py<sp/>==<sp/>&amp;PyFloat_Type)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meta_type_gv<sp/>=<sp/>G_VARIANT_TYPE_DOUBLE;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l<sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a26a270791d5d906dd7e771a9a92843c9" kindref="member">pd_output</ref>;<sp/>l;<sp/>l<sp/>=<sp/>l-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>l-&gt;data;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref><sp/>!=<sp/><ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(cmp-&gt;<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>,<sp/><ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_meta<sp/>&amp;&amp;<sp/>cmp-&gt;<ref refid="a00117_1a03e4f0f029e1f21a9e1b8cb9f0b0b41d" kindref="member">meta_type</ref><sp/>!=<sp/>meta_type_gv)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_meta<sp/>&amp;&amp;<sp/>strcmp(cmp-&gt;<ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref>,<sp/><ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_meta<sp/>&amp;&amp;<sp/>strcmp(cmp-&gt;<ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref>,<sp/><ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo<sp/>=<sp/>cmp;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pdo)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_new_output_id<sp/>=<sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>pdo-&gt;<ref refid="a00117_1af81b2abd5de86d24c60dde95bac23059" kindref="member">pdo_id</ref>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_new_output_id;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo<sp/>=<sp/>g_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00117" kindref="compound">otd_pd_output</ref>));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pdo_id<sp/>is<sp/>just<sp/>a<sp/>simple<sp/>index,<sp/>nothing<sp/>is<sp/>deleted<sp/>from<sp/>this<sp/>list<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1af81b2abd5de86d24c60dde95bac23059" kindref="member">pdo_id</ref><sp/>=<sp/>g_slist_length(<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a26a270791d5d906dd7e771a9a92843c9" kindref="member">pd_output</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref><sp/>=<sp/><ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref><sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref><sp/>=<sp/>g_strdup(<ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref><sp/>==<sp/><ref refid="a00258_1a44388b3e4ce610efcd4ee3c9d9c2da2dae610de52e15b25d64039ea58f961aeef" kindref="member">OTD_OUTPUT_META</ref>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1a03e4f0f029e1f21a9e1b8cb9f0b0b41d" kindref="member">meta_type</ref><sp/>=<sp/>meta_type_gv;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref><sp/>=<sp/>g_strdup(<ref refid="a00117_1a7d22814be62ef67c99d55c49c83d28b4" kindref="member">meta_name</ref>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdo-&gt;<ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref><sp/>=<sp/>g_strdup(<ref refid="a00117_1a587dd76fa4ce52312d026b69074ec0f5" kindref="member">meta_descr</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a26a270791d5d906dd7e771a9a92843c9" kindref="member">pd_output</ref><sp/>=<sp/>g_slist_append(<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a26a270791d5d906dd7e771a9a92843c9" kindref="member">pd_output</ref>,<sp/>pdo);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_new_output_id<sp/>=<sp/>Py_BuildValue(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>pdo-&gt;<ref refid="a00117_1af81b2abd5de86d24c60dde95bac23059" kindref="member">pdo_id</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Instance<sp/>%s<sp/>creating<sp/>new<sp/>output<sp/>type<sp/>%s<sp/>as<sp/>oid<sp/>%d<sp/>(%s).&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/><ref refid="a00080_1a32836f40cd48533652e96ed567b4c6c5" kindref="member">output_type_name</ref>(<ref refid="a00117_1a620f88dad4a874d0d402569ccd0d075b" kindref="member">output_type</ref>),<sp/>pdo-&gt;<ref refid="a00117_1af81b2abd5de86d24c60dde95bac23059" kindref="member">pdo_id</ref>,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00117_1abd149710bf6058bd5721294cd80ba543" kindref="member">proto_id</ref>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_new_output_id;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_term_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*v)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v[0])<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55babafaf47e7c5fd048f5032b57e7720fae" kindref="member">OTD_TERM_HIGH</ref>;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba6213a6c52d9c4bc4978d6a5858cfed62" kindref="member">OTD_TERM_LOW</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55baf255438cfe59bb66bd2dddbcb076d0a9" kindref="member">OTD_TERM_RISING_EDGE</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9d8558d21c424031ce3980b236c29fea" kindref="member">OTD_TERM_FALLING_EDGE</ref>;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9853f3adadace0f1f8922e0be7b088eb" kindref="member">OTD_TERM_EITHER_EDGE</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55bafe2ffaa9933f13dc051f5877309e45f7" kindref="member">OTD_TERM_NO_EDGE</ref>;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>pin<sp/>values<sp/>at<sp/>the<sp/>current<sp/>sample<sp/>number.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@param<sp/>di<sp/>The<sp/>decoder<sp/>instance<sp/>to<sp/>use.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>channels<sp/>must<sp/>be<sp/>&gt;=<sp/>1.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@return<sp/>A<sp/>newly<sp/>allocated<sp/>PyTuple<sp/>containing<sp/>the<sp/>pin<sp/>values<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>sample<sp/>number.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*get_current_pinvalues(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sample;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*sample_pos;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_offset,<sp/>bit_offset;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_pinvalues;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>decoder<sp/>instance.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_pinvalues<sp/>=<sp/>PyTuple_New(<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1ae5ade9bfe37f0f19cb4873264a0770ac" kindref="member">dec_num_channels</ref>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1ae5ade9bfe37f0f19cb4873264a0770ac" kindref="member">dec_num_channels</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>channelmap<sp/>value<sp/>of<sp/>-1<sp/>means<sp/>&quot;unused<sp/>optional<sp/>channel&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a70113106efa4f1a7e3c08fc1a94c52b3" kindref="member">dec_channelmap</ref>[i]<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Value<sp/>of<sp/>unused<sp/>channel<sp/>is<sp/>0xff,<sp/>instead<sp/>of<sp/>0<sp/>or<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(py_pinvalues,<sp/>i,<sp/>PyLong_FromUnsignedLong(0xff));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_pos<sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1ac5e48df7922126d6bbce1364d3c94ffe" kindref="member">inbuf</ref><sp/>+<sp/>((<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1aa5f6bb4a9f66843b74866b5697f888ca" kindref="member">abs_cur_samplenum</ref><sp/>-<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1acb8e6b509a2959427a0cce8645ddeb20" kindref="member">abs_start_samplenum</ref>)<sp/>*<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a2fbe8e3d4014000dc83066c064c573e5" kindref="member">data_unitsize</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte_offset<sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a70113106efa4f1a7e3c08fc1a94c52b3" kindref="member">dec_channelmap</ref>[i]<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_offset<sp/>=<sp/><ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>-&gt;<ref refid="a00113_1a70113106efa4f1a7e3c08fc1a94c52b3" kindref="member">dec_channelmap</ref>[i]<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>*(sample_pos<sp/>+<sp/>byte_offset)<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>bit_offset)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(py_pinvalues,<sp/>i,<sp/>PyLong_FromUnsignedLong(sample));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_pinvalues;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>Create<sp/>a<sp/>list<sp/>of<sp/>terms<sp/>in<sp/>the<sp/>specified<sp/>condition.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>If<sp/>there<sp/>are<sp/>no<sp/>terms<sp/>in<sp/>the<sp/>condition,<sp/>&apos;term_list&apos;<sp/>will<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@param<sp/>di<sp/>The<sp/>decoder<sp/>instance<sp/>to<sp/>use.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>@param<sp/>py_dict<sp/>A<sp/>Python<sp/>dict<sp/>containing<sp/>terms.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@param<sp/>term_list<sp/>Pointer<sp/>to<sp/>a<sp/>GSList<sp/>which<sp/>will<sp/>be<sp/>set<sp/>to<sp/>the<sp/>newly</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>created<sp/>list<sp/>of<sp/>terms.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>negative<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_term_list(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*<ref refid="a00117_1a5b8cc909c968fde6aa508c203dd68b29" kindref="member">di</ref>,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_dict,<sp/>GSList<sp/>**term_list)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_key,<sp/>*py_value;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00157" kindref="compound">otd_term</ref><sp/>*term;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/><ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*term_str;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_dict<sp/>||<sp/>!term_list)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" kindref="member">OTD_ERR_ARG</ref>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;Create&quot;<sp/>an<sp/>empty<sp/>GSList<sp/>of<sp/>terms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*term_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>all<sp/>items<sp/>in<sp/>the<sp/>current<sp/>dict.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PyDict_Next(py_dict,<sp/>&amp;pos,<sp/>&amp;py_key,<sp/>&amp;py_value))<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>whether<sp/>the<sp/>current<sp/>key<sp/>is<sp/>a<sp/>string<sp/>or<sp/>a<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyLong_Check(py_key))<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>key<sp/>is<sp/>a<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>value<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" kindref="member">py_pydictitem_as_str</ref>(py_dict,<sp/>py_key,<sp/>&amp;term_str))<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>the<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/>=<sp/>g_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00157" kindref="compound">otd_term</ref>));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref><sp/>=<sp/>get_term_type(term_str);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1a3444f62e20ff604453335a4c5989d664" kindref="member">channel</ref><sp/>=<sp/>PyLong_AsLong(py_key);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term-&gt;<ref refid="a00157_1a3444f62e20ff604453335a4c5989d664" kindref="member">channel</ref><sp/>&lt;<sp/>0<sp/>||<sp/>term-&gt;<ref refid="a00157_1a3444f62e20ff604453335a4c5989d664" kindref="member">channel</ref><sp/>&gt;=<sp/>di-&gt;<ref refid="a00113_1ae5ade9bfe37f0f19cb4873264a0770ac" kindref="member">dec_num_channels</ref>)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref><sp/>=<sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba540d45fdd7158b54a31985f06b11b3d1" kindref="member">OTD_TERM_ALWAYS_FALSE</ref>;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_free(term_str);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyUnicode_Check(py_key))<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>key<sp/>is<sp/>a<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>Check<sp/>if<sp/>the<sp/>key<sp/>is<sp/>&quot;skip&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" kindref="member">py_pydictitem_as_long</ref>(py_dict,<sp/>py_key,<sp/>&amp;<ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref>))<sp/>!=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>number<sp/>of<sp/>samples<sp/>to<sp/>skip.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/>=<sp/>g_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00157" kindref="compound">otd_term</ref>));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref><sp/>=<sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba4eb55bf5deff2672853013ccbf01fbc9" kindref="member">OTD_TERM_SKIP</ref>;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref><sp/>=<sp/><ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref>;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1a9e6b3919f45e9078174345beb03885cc" kindref="member">num_samples_already_skipped</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref><sp/>=<sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba540d45fdd7158b54a31985f06b11b3d1" kindref="member">OTD_TERM_ALWAYS_FALSE</ref>;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Term<sp/>key<sp/>is<sp/>neither<sp/>a<sp/>string<sp/>nor<sp/>a<sp/>number.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>term<sp/>to<sp/>the<sp/>list<sp/>of<sp/>terms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*term_list<sp/>=<sp/>g_slist_append(*term_list,<sp/>term);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcad6e315777c65836ac7489ddb503aceab" kindref="member">OTD_ERR</ref>;</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="816"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>Replace<sp/>the<sp/>current<sp/>condition<sp/>list<sp/>with<sp/>the<sp/>new<sp/>one.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>@param<sp/>self<sp/>TODO.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/>@param<sp/>args<sp/>TODO.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>@retval<sp/>OTD_OK<sp/>The<sp/>new<sp/>condition<sp/>list<sp/>was<sp/>set<sp/>successfully.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>@retval<sp/>OTD_ERR<sp/>There<sp/>was<sp/>an<sp/>error<sp/>setting<sp/>the<sp/>new<sp/>condition<sp/>list.</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>contents<sp/>of<sp/>di-&gt;condition_list<sp/>are<sp/>undefined.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>@retval<sp/>9999<sp/>TODO.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_new_condition_list(PyObject<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*term_list;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_conditionlist,<sp/>*py_conds,<sp/>*py_dict;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num_conditions,<sp/>ret;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!self<sp/>||<sp/>!args)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" kindref="member">OTD_ERR_ARG</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>decoder<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(di<sp/>=<sp/>otd_inst_find_by_obj(NULL,<sp/>self)))<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_Exception,<sp/></highlight><highlight class="stringliteral">&quot;decoder<sp/>instance<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Return<sp/>an<sp/>error<sp/>condition<sp/>from<sp/>.wait()<sp/>when<sp/>termination<sp/>is</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>requested,<sp/>such<sp/>that<sp/>decode()<sp/>will<sp/>terminate.</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1a7f0afc17aaf2b3dad6885c2636e5d2cb" kindref="member">want_wait_terminate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s:<sp/>Skip<sp/>(want_term).&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>__func__);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Parse<sp/>the<sp/>argument<sp/>of<sp/>self.wait()<sp/>into<sp/>&apos;py_conds&apos;,<sp/>and<sp/>check</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>data<sp/>type.<sp/>The<sp/>argument<sp/>is<sp/>optional,<sp/>None<sp/>is<sp/>assumed<sp/>in</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>its<sp/>absence.<sp/>None<sp/>or<sp/>an<sp/>empty<sp/>dict<sp/>or<sp/>an<sp/>empty<sp/>list<sp/>mean<sp/>that</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>there<sp/>is<sp/>no<sp/>condition,<sp/>and<sp/>the<sp/>next<sp/>available<sp/>sample<sp/>shall</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>get<sp/>returned<sp/>to<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_conds<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;|O&quot;</highlight><highlight class="normal">,<sp/>&amp;py_conds))<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>Python<sp/>raise<sp/>this<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(py_conds<sp/>==<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;py_conds&apos;<sp/>is<sp/>None.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ret_9999;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyList_Check(py_conds))<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;py_conds&apos;<sp/>is<sp/>a<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_conditionlist<sp/>=<sp/>py_conds;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_conditions<sp/>=<sp/>PyList_Size(py_conditionlist);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_conditions<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ret_9999;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>PD<sp/>invoked<sp/>self.wait([]).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(py_conditionlist);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_Check(py_conds))<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;py_conds&apos;<sp/>is<sp/>a<sp/>dict.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_Size(py_conds)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ret_9999;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>PD<sp/>invoked<sp/>self.wait({}).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>a<sp/>list<sp/>and<sp/>put<sp/>the<sp/>dict<sp/>in<sp/>there<sp/>for<sp/>convenience.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_conditionlist<sp/>=<sp/>PyList_New(1);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(py_conds);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyList_SetItem(py_conditionlist,<sp/>0,<sp/>py_conds);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_conditions<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Condition<sp/>list<sp/>is<sp/>neither<sp/>a<sp/>list<sp/>nor<sp/>a<sp/>dict.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>old<sp/>condition<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition_list_free(di);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>the<sp/>conditions,<sp/>set<sp/>di-&gt;condition_list<sp/>accordingly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_conditions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>condition<sp/>(dict)<sp/>from<sp/>the<sp/>condition<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_dict<sp/>=<sp/>PyList_GetItem(py_conditionlist,<sp/>i);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Check(py_dict))<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Condition<sp/>is<sp/>not<sp/>a<sp/>dict.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcad6e315777c65836ac7489ddb503aceab" kindref="member">OTD_ERR</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>list<sp/>of<sp/>terms<sp/>in<sp/>this<sp/>condition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>=<sp/>create_term_list(di,<sp/>py_dict,<sp/>&amp;term_list))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>new<sp/>condition<sp/>to<sp/>the<sp/>PD<sp/>instance&apos;s<sp/>condition<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a14f2d86acd8cce0b3562f6eac77a8135" kindref="member">condition_list</ref><sp/>=<sp/>g_slist_append(di-&gt;<ref refid="a00113_1a14f2d86acd8cce0b3562f6eac77a8135" kindref="member">condition_list</ref>,<sp/>term_list);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DecRef(py_conditionlist);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcad6e315777c65836ac7489ddb503aceab" kindref="member">OTD_ERR</ref>;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">ret_9999:</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9999;</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="931"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*<sp/>Create<sp/>a<sp/>SKIP<sp/>condition<sp/>list<sp/>for<sp/>condition-less<sp/>.wait()<sp/>calls.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*<sp/>@param<sp/>di<sp/>Decoder<sp/>instance.</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@param<sp/>count<sp/>Number<sp/>of<sp/>samples<sp/>to<sp/>skip.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*<sp/>@retval<sp/>OTD_OK<sp/>The<sp/>new<sp/>condition<sp/>list<sp/>was<sp/>set<sp/>successfully.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*<sp/>@retval<sp/>OTD_ERR<sp/>There<sp/>was<sp/>an<sp/>error<sp/>setting<sp/>the<sp/>new<sp/>condition<sp/>list.</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>contents<sp/>of<sp/>di-&gt;condition_list<sp/>are<sp/>undefined.</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/>This<sp/>routine<sp/>is<sp/>a<sp/>reduced<sp/>and<sp/>specialized<sp/>version<sp/>of<sp/>the<sp/>@ref</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>set_new_condition_list()<sp/>and<sp/>@ref<sp/>create_term_list()<sp/>routines<sp/>which</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>gets<sp/>invoked<sp/>when<sp/>.wait()<sp/>was<sp/>called<sp/>without<sp/>specifications<sp/>for</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>conditions.<sp/>This<sp/>minor<sp/>duplication<sp/>of<sp/>the<sp/>SKIP<sp/>term<sp/>list<sp/>creation</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>simplifies<sp/>the<sp/>logic<sp/>and<sp/>avoids<sp/>the<sp/>creation<sp/>of<sp/>expensive<sp/>Python</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>objects<sp/>with<sp/>&quot;constant&quot;<sp/>values<sp/>which<sp/>the<sp/>caller<sp/>did<sp/>not<sp/>pass<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>first<sp/>place.<sp/>It<sp/>results<sp/>in<sp/>maximum<sp/>sharing<sp/>of<sp/>match<sp/>handling<sp/>code</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>paths.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set_skip_condition(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>uint64_t<sp/>count)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00157" kindref="compound">otd_term</ref><sp/>*term;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*term_list;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00085_1ga5a47265f727fbb1ec521a564d8f957d3" kindref="member">condition_list_free</ref>(di);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term<sp/>=<sp/>g_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*term));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref><sp/>=<sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba4eb55bf5deff2672853013ccbf01fbc9" kindref="member">OTD_TERM_SKIP</ref>;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref><sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term-&gt;<ref refid="a00157_1a9e6b3919f45e9078174345beb03885cc" kindref="member">num_samples_already_skipped</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term_list<sp/>=<sp/>g_slist_append(NULL,<sp/>term);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a14f2d86acd8cce0b3562f6eac77a8135" kindref="member">condition_list</ref><sp/>=<sp/>g_slist_append(di-&gt;<ref refid="a00113_1a14f2d86acd8cce0b3562f6eac77a8135" kindref="member">condition_list</ref>,<sp/>term_list);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="a00080_1a5500c6975f291424482ae4900bbc86d1" refkind="member"><highlight class="normal"><ref refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" kindref="member">PyDoc_STRVAR</ref>(Decoder_wait_doc,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wait<sp/>for<sp/>one<sp/>or<sp/>more<sp/>conditions<sp/>to<sp/>occur.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>sample<sp/>data<sp/>at<sp/>the<sp/>next<sp/>position<sp/>where<sp/>the<sp/>condition\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>seen.<sp/>When<sp/>the<sp/>optional<sp/>condition<sp/>is<sp/>missing<sp/>or<sp/>empty,<sp/>the<sp/>next\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sample<sp/>number<sp/>is<sp/>used.<sp/>The<sp/>condition<sp/>can<sp/>be<sp/>a<sp/>dictionary<sp/>with<sp/>one\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;condition&apos;s<sp/>details,<sp/>or<sp/>a<sp/>list<sp/>of<sp/>dictionaries<sp/>specifying<sp/>multiple\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;conditions<sp/>of<sp/>which<sp/>at<sp/>least<sp/>one<sp/>condition<sp/>must<sp/>be<sp/>true.<sp/>Dicts<sp/>can\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;contain<sp/>one<sp/>or<sp/>more<sp/>key/value<sp/>pairs,<sp/>all<sp/>of<sp/>which<sp/>must<sp/>be<sp/>true<sp/>for\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>dict&apos;s<sp/>condition<sp/>to<sp/>be<sp/>considered<sp/>true.<sp/>The<sp/>key<sp/>either<sp/>is<sp/>a\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;channel<sp/>index<sp/>or<sp/>a<sp/>keyword,<sp/>the<sp/>value<sp/>is<sp/>the<sp/>operation&apos;s<sp/>parameter.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Supported<sp/>parameters<sp/>for<sp/>channel<sp/>number<sp/>keys:<sp/>&apos;h&apos;,<sp/>&apos;l&apos;,<sp/>&apos;r&apos;,<sp/>&apos;f&apos;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;or<sp/>&apos;e&apos;<sp/>for<sp/>level<sp/>or<sp/>edge<sp/>conditions.<sp/>Other<sp/>supported<sp/>keywords:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;skip&apos;<sp/>to<sp/>advance<sp/>over<sp/>the<sp/>given<sp/>number<sp/>of<sp/>samples.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*Decoder_wait(PyObject<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="984"><highlight class="normal">{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>skip_count;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gboolean<sp/>found_match;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_pinvalues,<sp/>*py_matched,<sp/>*py_samplenum;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!self<sp/>||<sp/>!args)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(di<sp/>=<sp/>otd_inst_find_by_obj(NULL,<sp/>self)))<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_Exception,<sp/></highlight><highlight class="stringliteral">&quot;decoder<sp/>instance<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>set_new_condition_list(self,<sp/>args);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s:<sp/>Aborting<sp/>wait().&quot;</highlight><highlight class="normal">,<sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>__func__);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>9999)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Empty<sp/>condition<sp/>list,<sp/>automatic<sp/>match.<sp/>Arrange<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>execution<sp/>of<sp/>regular<sp/>match<sp/>handling<sp/>code<sp/>paths<sp/>such<sp/>that</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>next<sp/>available<sp/>sample<sp/>is<sp/>returned<sp/>to<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>to<sp/>skip<sp/>one<sp/>sample<sp/>when<sp/>&quot;anywhere<sp/>within<sp/>the</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stream&quot;,<sp/>yet<sp/>make<sp/>sure<sp/>to<sp/>not<sp/>skip<sp/>sample<sp/>number<sp/>0.</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1aa5f6bb4a9f66843b74866b5697f888ca" kindref="member">abs_cur_samplenum</ref>)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!di-&gt;<ref refid="a00113_1a14f2d86acd8cce0b3562f6eac77a8135" kindref="member">condition_list</ref>)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>set_skip_condition(di,<sp/>skip_count);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s:<sp/>Cannot<sp/>setup<sp/>condition-less<sp/>wait().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>__func__);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>new<sp/>samples<sp/>to<sp/>process,<sp/>or<sp/>termination<sp/>request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mutex_lock(&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!di-&gt;<ref refid="a00113_1a045375c6886c8508d2057ceb402bd246" kindref="member">got_new_samples</ref><sp/>&amp;&amp;<sp/>!di-&gt;<ref refid="a00113_1a7f0afc17aaf2b3dad6885c2636e5d2cb" kindref="member">want_wait_terminate</ref>)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cond_wait(&amp;di-&gt;<ref refid="a00113_1aa6330fb8d39f3192cb6cf3ec63ceac19" kindref="member">got_new_samples_cond</ref>,<sp/>&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>whether<sp/>any<sp/>of<sp/>the<sp/>current<sp/>condition(s)<sp/>match.</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Arrange<sp/>for<sp/>termination<sp/>requests<sp/>to<sp/>take<sp/>a<sp/>code<sp/>path<sp/>which</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>won&apos;t<sp/>find<sp/>new<sp/>samples<sp/>to<sp/>process,<sp/>pretends<sp/>to<sp/>have<sp/>processed</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>previously<sp/>stored<sp/>samples,<sp/>and<sp/>returns<sp/>to<sp/>the<sp/>main<sp/>thread,</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>while<sp/>the<sp/>termination<sp/>request<sp/>still<sp/>gets<sp/>signalled.</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_match<sp/>=<sp/><ref refid="a00029_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ignore<sp/>return<sp/>value<sp/>for<sp/>now,<sp/>should<sp/>never<sp/>be<sp/>negative.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)process_samples_until_condition_match(di,<sp/>&amp;found_match);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there&apos;s<sp/>a<sp/>match,<sp/>set<sp/>self.samplenum<sp/>etc.<sp/>and<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_match)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>self.samplenum<sp/>to<sp/>the<sp/>(absolute)<sp/>sample<sp/>number<sp/>that<sp/>matched.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_samplenum<sp/>=<sp/>PyLong_FromUnsignedLongLong(di-&gt;<ref refid="a00113_1aa5f6bb4a9f66843b74866b5697f888ca" kindref="member">abs_cur_samplenum</ref>);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_SetAttrString(di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref>,<sp/></highlight><highlight class="stringliteral">&quot;samplenum&quot;</highlight><highlight class="normal">,<sp/>py_samplenum);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_samplenum);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1abfda650553b54d3d44fdf10fa501dc3a" kindref="member">match_array</ref><sp/>&amp;&amp;<sp/>di-&gt;<ref refid="a00113_1abfda650553b54d3d44fdf10fa501dc3a" kindref="member">match_array</ref>-&gt;len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_matched<sp/>=<sp/>PyTuple_New(di-&gt;<ref refid="a00113_1abfda650553b54d3d44fdf10fa501dc3a" kindref="member">match_array</ref>-&gt;len);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>di-&gt;<ref refid="a00113_1abfda650553b54d3d44fdf10fa501dc3a" kindref="member">match_array</ref>-&gt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(py_matched,<sp/>i,<sp/>PyBool_FromLong(di-&gt;<ref refid="a00113_1abfda650553b54d3d44fdf10fa501dc3a" kindref="member">match_array</ref>-&gt;data[i]));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_SetAttrString(di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref>,<sp/></highlight><highlight class="stringliteral">&quot;matched&quot;</highlight><highlight class="normal">,<sp/>py_matched);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_matched);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_array_free(di);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_SetAttrString(di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref>,<sp/></highlight><highlight class="stringliteral">&quot;matched&quot;</highlight><highlight class="normal">,<sp/>Py_None);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_pinvalues<sp/>=<sp/>get_current_pinvalues(di);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mutex_unlock(&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_pinvalues;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>match,<sp/>reset<sp/>state<sp/>for<sp/>the<sp/>next<sp/>chunk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a045375c6886c8508d2057ceb402bd246" kindref="member">got_new_samples</ref><sp/>=<sp/><ref refid="a00029_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a974ca6038f2782e28aa9273073db7b7f" kindref="member">handled_all_samples</ref><sp/>=<sp/><ref refid="a00029_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1acb8e6b509a2959427a0cce8645ddeb20" kindref="member">abs_start_samplenum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1a21041f21583e4260a07449dc1612a8ea" kindref="member">abs_end_samplenum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1ac5e48df7922126d6bbce1364d3c94ffe" kindref="member">inbuf</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1af5d715e676e52b289de4b9692ccd0d01" kindref="member">inbuflen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Signal<sp/>the<sp/>main<sp/>thread<sp/>that<sp/>we<sp/>handled<sp/>all<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cond_signal(&amp;di-&gt;<ref refid="a00113_1a369833301696288db4a2201f44dc4c3e" kindref="member">handled_all_samples_cond</ref>);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>EOF<sp/>was<sp/>provided<sp/>externally,<sp/>communicate<sp/>the</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Python<sp/>EOFError<sp/>exception<sp/>to<sp/>.decode()<sp/>and<sp/>return</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>from<sp/>the<sp/>.wait()<sp/>method<sp/>call.<sp/>This<sp/>is<sp/>motivated<sp/>by</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>use<sp/>of<sp/>Python<sp/>context<sp/>managers,<sp/>so<sp/>that<sp/>.decode()</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>methods<sp/>can<sp/>&quot;close&quot;<sp/>incompletely<sp/>accumulated<sp/>data</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>when<sp/>the<sp/>sample<sp/>data<sp/>is<sp/>exhausted.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1af4d0628e6d7341c9cd64fb2c7f58798b" kindref="member">communicate_eof</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>self.samplenum<sp/>to<sp/>the<sp/>(absolute)<sp/>last<sp/>sample<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_samplenum<sp/>=<sp/>PyLong_FromUnsignedLongLong(di-&gt;<ref refid="a00113_1aa5f6bb4a9f66843b74866b5697f888ca" kindref="member">abs_cur_samplenum</ref>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_SetAttrString(di-&gt;<ref refid="a00113_1a81ec9ee5165f12f9079683bcf57cf4cd" kindref="member">py_inst</ref>,<sp/></highlight><highlight class="stringliteral">&quot;samplenum&quot;</highlight><highlight class="normal">,<sp/>py_samplenum);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_samplenum);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Raise<sp/>an<sp/>EOFError<sp/>Python<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s:<sp/>Raising<sp/>EOF<sp/>from<sp/>wait().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>__func__);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mutex_unlock(&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_EOFError,<sp/></highlight><highlight class="stringliteral">&quot;samples<sp/>exhausted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>termination<sp/>of<sp/>wait()<sp/>and<sp/>decode()<sp/>was<sp/>requested,</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>then<sp/>exit<sp/>the<sp/>loop<sp/>after<sp/>releasing<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="a00113_1a7f0afc17aaf2b3dad6885c2636e5d2cb" kindref="member">want_wait_terminate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s:<sp/>Will<sp/>return<sp/>from<sp/>wait().&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di-&gt;<ref refid="a00113_1abde64b952bdf7918589230fe1b6cd124" kindref="member">inst_id</ref>,<sp/>__func__);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mutex_unlock(&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mutex_unlock(&amp;di-&gt;<ref refid="a00113_1a0b14c71c1990b9d61c3d557b25dc96b4" kindref="member">data_mutex</ref>);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_RETURN_NONE;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="a00080_1a1108ee813fc6db469aae7e005eff6b75" refkind="member"><highlight class="normal"><ref refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" kindref="member">PyDoc_STRVAR</ref>(Decoder_has_channel_doc,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>whether<sp/>input<sp/>data<sp/>is<sp/>supplied<sp/>for<sp/>a<sp/>given<sp/>channel.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Argument:<sp/>A<sp/>channel<sp/>index.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns:<sp/>A<sp/>boolean,<sp/>True<sp/>if<sp/>the<sp/>channel<sp/>is<sp/>connected,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;False<sp/>if<sp/>the<sp/>channel<sp/>is<sp/>open<sp/>(won&apos;t<sp/>see<sp/>any<sp/>input<sp/>data).\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1145"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*<sp/>Return<sp/>whether<sp/>the<sp/>specified<sp/>channel<sp/>was<sp/>supplied<sp/>to<sp/>the<sp/>decoder.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/>*<sp/>@param<sp/>self<sp/>TODO.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/>*<sp/>@param<sp/>args<sp/>TODO.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Py_True<sp/>The<sp/>channel<sp/>has<sp/>been<sp/>supplied<sp/>by<sp/>the<sp/>frontend.</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Py_False<sp/>The<sp/>channel<sp/>has<sp/>been<sp/>supplied<sp/>by<sp/>the<sp/>frontend.</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NULL<sp/>An<sp/>error<sp/>occurred.</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*Decoder_has_channel(PyObject<sp/>*self,<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>count;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*bool_ret;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!self<sp/>||<sp/>!args)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(di<sp/>=<sp/>otd_inst_find_by_obj(NULL,<sp/>self)))<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_Exception,<sp/></highlight><highlight class="stringliteral">&quot;decoder<sp/>instance<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>integer<sp/>argument<sp/>of<sp/>self.has_channel().<sp/>Check<sp/>for</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>range<sp/>of<sp/>supported<sp/>PD<sp/>input<sp/>channel<sp/>numbers.</highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyArg_ParseTuple(args,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>&amp;idx))<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>Python<sp/>raise<sp/>this<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>g_slist_length(di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1a791a5fc555163f0e750fc8270c5dd33a" kindref="member">channels</ref>)<sp/>+</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_slist_length(di-&gt;<ref refid="a00113_1a3f7cddd503846ba899d5f46fbdff36b6" kindref="member">decoder</ref>-&gt;<ref refid="a00093_1a00aa7b406a328a493b154c5af2f0db55" kindref="member">opt_channels</ref>);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0<sp/>||<sp/>idx<sp/>&gt;=<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>index<sp/>%d,<sp/>PD<sp/>channel<sp/>count<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/>count);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_IndexError,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>channel<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool_ret<sp/>=<sp/>(di-&gt;<ref refid="a00113_1a70113106efa4f1a7e3c08fc1a94c52b3" kindref="member">dec_channelmap</ref>[idx]<sp/>==<sp/>-1)<sp/>?<sp/>Py_False<sp/>:<sp/>Py_True;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(bool_ret);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool_ret;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="a00080_1abac60368e3459ef7abdef8c18afa5080" refkind="member"><highlight class="normal"><ref refid="a00080_1aa6f491ca5e68da96d87ac1c0852ae9e5" kindref="member">PyDoc_STRVAR</ref>(Decoder_doc,<sp/></highlight><highlight class="stringliteral">&quot;sigrok<sp/>Decoder<sp/>base<sp/>class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>Decoder_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;put&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_put,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_put_doc,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;register&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyCFunction)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*)(void))Decoder_register,<sp/>METH_VARARGS<sp/>|<sp/>METH_KEYWORDS,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_register_doc,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_wait,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_wait_doc,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;has_channel&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_has_channel,<sp/>METH_VARARGS,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decoder_has_channel_doc,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" kindref="member">ALL_ZERO</ref>,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1223"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/>*<sp/>Create<sp/>the<sp/>opentracedecode.Decoder<sp/>type.</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>new<sp/>type<sp/>object.</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="a00062_1a4fad07f52157e88c715590c8b7e8778b" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>PyObject<sp/>*<ref refid="a00062_1a4fad07f52157e88c715590c8b7e8778b" kindref="member">otd_Decoder_type_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyType_Spec<sp/>spec;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyType_Slot<sp/>slots[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Py_tp_doc,<sp/>Decoder_doc<sp/>},</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Py_tp_methods,<sp/>Decoder_methods<sp/>},</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Py_tp_new,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;PyType_GenericNew<sp/>},</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" kindref="member">ALL_ZERO</ref>,</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_obj;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;opentracedecode.Decoder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.basicsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(otd_Decoder);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.itemsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.flags<sp/>=<sp/>Py_TPFLAGS_DEFAULT<sp/>|<sp/>Py_TPFLAGS_BASETYPE;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.slots<sp/>=<sp/>slots;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_obj<sp/>=<sp/>PyType_FromSpec(&amp;spec);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_obj;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/type_decoder.c"/>
  </compounddef>
</doxygen>
