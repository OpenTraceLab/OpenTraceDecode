<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="a00047" kind="file" language="C++">
    <compoundname>util.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="a00062" local="yes">libopentracedecode-internal.h</includes>
    <incdepgraph>
      <node id="3">
        <label>libopentracedecode-internal.h</label>
        <link refid="a00062"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/util.c</label>
        <link refid="a00047"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Python.h</label>
      </node>
      <node id="2">
        <label>config.h</label>
      </node>
      <node id="5">
        <label>opentracedecode/libopentracedecode.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="a00047_1a753884db4a1ce35a8792d39305e298b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> PyObject *</type>
        <definition>OTD_PRIV PyObject * py_import_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>py_import_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Import a Python module by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is implemented in terms of PyImport_Import() rather than PyImport_ImportModule(), so that the import hooks are not bypassed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module to load as UTF-8 string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Python module object, or NULL if an exception occurred. The caller is responsible for evaluating and clearing the Python error state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="36" column="19" bodyfile="src/util.c" bodystart="36" bodyend="55"/>
        <references refid="a00062_1a753884db4a1ce35a8792d39305e298b5" compoundref="a00047" startline="36" endline="55">py_import_by_name</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a753884db4a1ce35a8792d39305e298b5" compoundref="a00047" startline="36" endline="55">py_import_by_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a70c9b66cac4582972cabd780fa8196ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_attr_as_str</definition>
        <argsstring>(PyObject *py_obj, const char *attr, char **outstr)</argsstring>
        <name>py_attr_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python object&apos;s attribute, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="70" column="14" bodyfile="src/util.c" bodystart="70" bodyend="99"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a4adcc9f4d9248274355fe43b0b002371" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_attr_as_strlist</definition>
        <argsstring>(PyObject *py_obj, const char *attr, GSList **outstrlist)</argsstring>
        <name>py_attr_as_strlist</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>GSList **</type>
          <declname>outstrlist</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python object&apos;s attribute, returned as a newly allocated GSList of char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstrlist</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to GSList of char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstrlist&apos; argument points to a GSList of g_malloc()ed strings upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="115" column="14" bodyfile="src/util.c" bodystart="115" bodyend="161"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</references>
        <references refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_dictitem_as_str</definition>
        <argsstring>(PyObject *py_obj, const char *key, char **outstr)</argsstring>
        <name>py_dictitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="176" column="14" bodyfile="src/util.c" bodystart="176" bodyend="202"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1af44148d9e53fcd3fa49df1268cc3ab46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_listitem_as_str</definition>
        <argsstring>(PyObject *py_obj, Py_ssize_t idx, char **outstr)</argsstring>
        <name>py_listitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python list item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the list item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="217" column="14" bodyfile="src/util.c" bodystart="217" bodyend="245"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</referencedby>
        <referencedby refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1ac5d5f089827945cee17bb3c1e3014d99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_pydictitem_as_str</definition>
        <argsstring>(PyObject *py_obj, PyObject *py_key, char **outstr)</argsstring>
        <name>py_pydictitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>py_key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="260" column="14" bodyfile="src/util.c" bodystart="260" bodyend="294"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" compoundref="a00258" startline="70">OTD_ERR_ARG</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a4636183f49f3c2bbd94a41201d7d067a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_pydictitem_as_long</definition>
        <argsstring>(PyObject *py_obj, PyObject *py_key, int64_t *out)</argsstring>
        <name>py_pydictitem_as_long</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>py_key</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="308" column="14" bodyfile="src/util.c" bodystart="308" bodyend="343"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" compoundref="a00258" startline="70">OTD_ERR_ARG</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" compoundref="a00047" startline="308" endline="343">py_pydictitem_as_long</references>
        <referencedby refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" compoundref="a00047" startline="308" endline="343">py_pydictitem_as_long</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a030a8367513df3651da4ff852a73b2aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_str_as_str</definition>
        <argsstring>(PyObject *py_str, char **outstr)</argsstring>
        <name>py_str_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python unicode string object, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The unicode string object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="357" column="14" bodyfile="src/util.c" bodystart="357" bodyend="386"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00083_1ga70c50e6acd942b4b3aedbc141c3cbf14" compoundref="a00059" startline="1086" endline="1121">otd_decoder_doc_get</referencedby>
        <referencedby refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</referencedby>
        <referencedby refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</referencedby>
        <referencedby refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</referencedby>
        <referencedby refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</referencedby>
        <referencedby refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1aada9cd9c209f127bd43e0a4fd6413ed1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_strseq_to_char</definition>
        <argsstring>(PyObject *py_strseq, char ***out_strv)</argsstring>
        <name>py_strseq_to_char</name>
        <param>
          <type>PyObject *</type>
          <declname>py_strseq</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>out_strv</declname>
        </param>
        <briefdescription>
<para>Convert a Python list of unicode strings to a C string vector. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, a pointer to a newly allocated NUL-terminated array of allocated C strings is written to <emphasis>out_strv</emphasis>. The caller must g_free() each string and the array itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_strseq</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequence object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_strv</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of string vector to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="401" column="14" bodyfile="src/util.c" bodystart="401" bodyend="464"/>
        <references refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" compoundref="a00062" startline="118">otd_err</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcabe3955617912cc0e8c0bd3f5e6f62bf7" compoundref="a00258" startline="69">OTD_ERR_MALLOC</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" compoundref="a00047" startline="401" endline="464">py_strseq_to_char</references>
        <referencedby refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" compoundref="a00047" startline="401" endline="464">py_strseq_to_char</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00047_1a603e042a3820d61d96bac87805716706" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> GVariant *</type>
        <definition>OTD_PRIV GVariant * py_obj_to_variant</definition>
        <argsstring>(PyObject *py_obj)</argsstring>
        <name>py_obj_to_variant</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <briefdescription>
<para>Convert a Python scalar object to a GLib variant. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported variant types are string, int64 and double.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python object. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating reference to a new variant, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util.c" line="475" column="19" bodyfile="src/util.c" bodystart="475" bodyend="518"/>
        <references refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" compoundref="a00062" startline="118">otd_err</references>
        <references refid="a00062_1a603e042a3820d61d96bac87805716706" compoundref="a00047" startline="475" endline="518">py_obj_to_variant</references>
        <referencedby refid="a00062_1a603e042a3820d61d96bac87805716706" compoundref="a00047" startline="475" endline="518">py_obj_to_variant</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>libopentracedecode<sp/>project.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2010<sp/>Uwe<sp/>Hermann<sp/>&lt;uwe@hermann-uwe.de&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Bert<sp/>Vermeulen<sp/>&lt;bert@biot.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="a00062" kindref="compound">libopentracedecode-internal.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>First,<sp/>so<sp/>we<sp/>avoid<sp/>a<sp/>_POSIX_C_SOURCE<sp/>warning.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Import<sp/>a<sp/>Python<sp/>module<sp/>by<sp/>name.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>PyImport_Import()<sp/>rather<sp/>than</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>PyImport_ImportModule(),<sp/>so<sp/>that<sp/>the<sp/>import<sp/>hooks<sp/>are<sp/>not<sp/>bypassed.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>name<sp/>The<sp/>name<sp/>of<sp/>the<sp/>module<sp/>to<sp/>load<sp/>as<sp/>UTF-8<sp/>string.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>Python<sp/>module<sp/>object,<sp/>or<sp/>NULL<sp/>if<sp/>an<sp/>exception<sp/>occurred.<sp/>The</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>evaluating<sp/>and<sp/>clearing<sp/>the<sp/>Python<sp/>error<sp/>state.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="a00062_1a753884db4a1ce35a8792d39305e298b5" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>PyObject<sp/>*<ref refid="a00062_1a753884db4a1ce35a8792d39305e298b5" kindref="member">py_import_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_mod,<sp/>*py_modname;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_modname<sp/>=<sp/>PyUnicode_FromString(name);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_modname)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_mod<sp/>=<sp/>PyImport_Import(py_modname);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_modname);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_mod;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>object&apos;s<sp/>attribute,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_obj<sp/>The<sp/>object<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>attr<sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>outstr<sp/>ptr<sp/>to<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstr&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>g_malloc()ed<sp/>string<sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" kindref="member">py_attr_as_str</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*attr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_str;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyObject_HasAttrString(py_obj,<sp/>attr))<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>has<sp/>no<sp/>attribute<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>attr);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_str<sp/>=<sp/>PyObject_GetAttrString(py_obj,<sp/>attr)))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>attribute<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>attr);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(py_str,<sp/>outstr);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_str);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>object&apos;s<sp/>attribute,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>allocated<sp/>GSList<sp/>of<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_obj<sp/>The<sp/>object<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>attr<sp/>Name<sp/>of<sp/>the<sp/>attribute<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>outstrlist<sp/>ptr<sp/>to<sp/>GSList<sp/>of<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstrlist&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>GSList<sp/>of<sp/>g_malloc()ed<sp/>strings</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" kindref="member">py_attr_as_strlist</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*attr,<sp/>GSList<sp/>**outstrlist)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_list;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>idx;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outstr;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyObject_HasAttrString(py_obj,<sp/>attr))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>has<sp/>no<sp/>attribute<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>attr);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_list<sp/>=<sp/>PyObject_GetAttrString(py_obj,<sp/>attr)))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>attribute<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>attr);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(py_list))<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>list.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outstrlist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>PyList_Size(py_list);<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" kindref="member">py_listitem_as_str</ref>(py_list,<sp/>idx,<sp/>&amp;outstr);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>item<sp/>%zd.&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outstrlist<sp/>=<sp/>g_slist_append(*outstrlist,<sp/>outstr);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_list);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>dictionary<sp/>item,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_obj<sp/>The<sp/>dictionary<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>key<sp/>Key<sp/>of<sp/>the<sp/>item<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>outstr<sp/>Pointer<sp/>to<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstr&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>g_malloc()ed<sp/>string<sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" kindref="member">py_dictitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_value;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Check(py_obj))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>dictionary.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_value<sp/>=<sp/>PyDict_GetItemString(py_obj,<sp/>key)))<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>has<sp/>no<sp/>attribute<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(py_value,<sp/>outstr);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>list<sp/>item,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_obj<sp/>The<sp/>list<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>Index<sp/>of<sp/>the<sp/>list<sp/>item<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>outstr<sp/>Pointer<sp/>to<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstr&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>g_malloc()ed<sp/>string<sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" kindref="member">py_listitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/>Py_ssize_t<sp/>idx,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>item_idx;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_value;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyList_Check(py_obj))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>list.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item_idx<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_value<sp/>=<sp/>PyList_GetItem(py_obj,<sp/>item_idx)))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>list<sp/>item<sp/>%zd.&quot;</highlight><highlight class="normal">,<sp/>item_idx);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(py_value,<sp/>outstr);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>dictionary<sp/>item,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param<sp/>py_obj<sp/>The<sp/>dictionary<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@param<sp/>py_key<sp/>Key<sp/>of<sp/>the<sp/>item<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@param<sp/>outstr<sp/>Pointer<sp/>to<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstr&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>malloc()ed<sp/>string<sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" kindref="member">py_pydictitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/>PyObject<sp/>*py_key,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_value;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_obj<sp/>||<sp/>!py_key<sp/>||<sp/>!outstr)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" kindref="member">OTD_ERR_ARG</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Check(py_obj))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>dictionary.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_value<sp/>=<sp/>PyDict_GetItem(py_obj,<sp/>py_key)))<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>has<sp/>no<sp/>such<sp/>key.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyUnicode_Check(py_value))<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>value<sp/>should<sp/>be<sp/>a<sp/>string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(py_value,<sp/>outstr);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>dictionary<sp/>item,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param<sp/>py_obj<sp/>The<sp/>dictionary<sp/>to<sp/>probe.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@param<sp/>py_key<sp/>Key<sp/>of<sp/>the<sp/>item<sp/>to<sp/>retrieve.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@param<sp/>out<sp/>TODO.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" kindref="member">py_pydictitem_as_long</ref>(PyObject<sp/>*py_obj,<sp/>PyObject<sp/>*py_key,<sp/>int64_t<sp/>*out)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_value;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_obj<sp/>||<sp/>!py_key<sp/>||<sp/>!out)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" kindref="member">OTD_ERR_ARG</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Check(py_obj))<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>dictionary.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(py_value<sp/>=<sp/>PyDict_GetItem(py_obj,<sp/>py_key)))<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>has<sp/>no<sp/>such<sp/>key.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyLong_Check(py_value))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Dictionary<sp/>value<sp/>should<sp/>be<sp/>a<sp/>long.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>PyLong_AsLongLong(py_value);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>a<sp/>Python<sp/>unicode<sp/>string<sp/>object,<sp/>returned<sp/>as<sp/>a<sp/>newly</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>allocated<sp/>char<sp/>*.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_str<sp/>The<sp/>unicode<sp/>string<sp/>object.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>outstr<sp/>ptr<sp/>to<sp/>char<sp/>*<sp/>storage<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;outstr&apos;<sp/>argument<sp/>points<sp/>to<sp/>a<sp/>g_malloc()ed<sp/>string<sp/>upon<sp/>success.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="a00062_1a030a8367513df3651da4ff852a73b2aa" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(PyObject<sp/>*py_str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_bytes;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyUnicode_Check(py_str))<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" kindref="member">otd_dbg</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>is<sp/>not<sp/>a<sp/>string<sp/>object.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_bytes<sp/>=<sp/>PyUnicode_AsUTF8String(py_str);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(py_bytes)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>g_strdup(PyBytes_AsString(py_bytes));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_bytes);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outstr<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>extract<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>Python<sp/>list<sp/>of<sp/>unicode<sp/>strings<sp/>to<sp/>a<sp/>C<sp/>string<sp/>vector.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>On<sp/>success,<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>newly<sp/>allocated<sp/>NUL-terminated<sp/>array<sp/>of</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>allocated<sp/>C<sp/>strings<sp/>is<sp/>written<sp/>to<sp/>@a<sp/>out_strv.<sp/>The<sp/>caller<sp/>must<sp/>g_free()</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>each<sp/>string<sp/>and<sp/>the<sp/>array<sp/>itself.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_strseq<sp/>The<sp/>sequence<sp/>object.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>out_strv<sp/>Address<sp/>of<sp/>string<sp/>vector<sp/>to<sp/>be<sp/>filled<sp/>in.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@return<sp/>OTD_OK<sp/>upon<sp/>success,<sp/>a<sp/>(negative)<sp/>error<sp/>code<sp/>otherwise.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" kindref="member">py_strseq_to_char</ref>(PyObject<sp/>*py_strseq,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***out_strv)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_item,<sp/>*py_bytes;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**strv,<sp/>*str;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>seq_len,<sp/>i;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" kindref="member">OTD_ERR_PYTHON</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PySequence_Check(py_strseq))<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Object<sp/>does<sp/>not<sp/>provide<sp/>sequence<sp/>protocol.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_len<sp/>=<sp/>PySequence_Size(py_strseq);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seq_len<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>obtain<sp/>sequence<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strv<sp/>=<sp/>g_try_new0(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>seq_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strv)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>result<sp/>string<sp/>vector.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcabe3955617912cc0e8c0bd3f5e6f62bf7" kindref="member">OTD_ERR_MALLOC</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>seq_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_item<sp/>=<sp/>PySequence_GetItem(py_strseq,<sp/>i);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_item)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_out;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyUnicode_Check(py_item))<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_item);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_out;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_bytes<sp/>=<sp/>PyUnicode_AsUTF8String(py_item);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_item);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_bytes)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_out;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>g_strdup(PyBytes_AsString(py_bytes));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_bytes);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_out;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strv[i]<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_strv<sp/>=<sp/>strv;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" kindref="member">OTD_OK</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">err_out:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_strfreev(strv);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>obtain<sp/>string<sp/>item&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>Python<sp/>scalar<sp/>object<sp/>to<sp/>a<sp/>GLib<sp/>variant.</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>Supported<sp/>variant<sp/>types<sp/>are<sp/>string,<sp/>int64<sp/>and<sp/>double.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>py_obj<sp/>The<sp/>Python<sp/>object.<sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>@return<sp/>A<sp/>floating<sp/>reference<sp/>to<sp/>a<sp/>new<sp/>variant,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@private</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="a00062_1a603e042a3820d61d96bac87805716706" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>GVariant<sp/>*<ref refid="a00062_1a603e042a3820d61d96bac87805716706" kindref="member">py_obj_to_variant</ref>(PyObject<sp/>*py_obj)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GVariant<sp/>*var<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>gstate;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gstate<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyUnicode_Check(py_obj))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_bytes;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_bytes<sp/>=<sp/>PyUnicode_AsUTF8String(py_obj);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(py_bytes)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>PyBytes_AsString(py_bytes);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>g_variant_new_string(str);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_bytes);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!var)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>extract<sp/>string<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyLong_Check(py_obj))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>integer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>val;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>PyLong_AsLongLong(py_obj);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_Occurred())</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>g_variant_new_int64(val);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>extract<sp/>integer<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyFloat_Check(py_obj))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>float<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>PyFloat_AsDouble(py_obj);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_Occurred())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>g_variant_new_double(val);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otd_exception_catch(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>extract<sp/>float<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" kindref="member">otd_err</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>extract<sp/>value<sp/>of<sp/>unsupported<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(gstate);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/util.c"/>
  </compounddef>
</doxygen>
