<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="a00062" kind="file" language="C++">
    <compoundname>libopentracedecode-internal.h</compoundname>
    <includes local="no">Python.h</includes>
    <includes local="no">opentracedecode/libopentracedecode.h</includes>
    <includedby refid="a00059" local="yes">src/decoder.c</includedby>
    <includedby refid="a00065" local="yes">src/exception.c</includedby>
    <includedby refid="a00050" local="yes">src/instance.c</includedby>
    <includedby refid="a00071" local="yes">src/log.c</includedby>
    <includedby refid="a00074" local="yes">src/module_opentracedecode.c</includedby>
    <includedby refid="a00053" local="yes">src/otd.c</includedby>
    <includedby refid="a00068" local="yes">src/session.c</includedby>
    <includedby refid="a00080" local="yes">src/type_decoder.c</includedby>
    <includedby refid="a00047" local="yes">src/util.c</includedby>
    <includedby refid="a00056" local="yes">src/version.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/libopentracedecode-internal.h</label>
        <link refid="a00062"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Python.h</label>
      </node>
      <node id="3">
        <label>opentracedecode/libopentracedecode.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/decoder.c</label>
        <link refid="a00059"/>
      </node>
      <node id="3">
        <label>src/exception.c</label>
        <link refid="a00065"/>
      </node>
      <node id="4">
        <label>src/instance.c</label>
        <link refid="a00050"/>
      </node>
      <node id="1">
        <label>src/libopentracedecode-internal.h</label>
        <link refid="a00062"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/log.c</label>
        <link refid="a00071"/>
      </node>
      <node id="6">
        <label>src/module_opentracedecode.c</label>
        <link refid="a00074"/>
      </node>
      <node id="7">
        <label>src/otd.c</label>
        <link refid="a00053"/>
      </node>
      <node id="8">
        <label>src/session.c</label>
        <link refid="a00068"/>
      </node>
      <node id="9">
        <label>src/type_decoder.c</label>
        <link refid="a00080"/>
      </node>
      <node id="10">
        <label>src/util.c</label>
        <link refid="a00047"/>
      </node>
      <node id="11">
        <label>src/version.c</label>
        <link refid="a00056"/>
      </node>
    </invincdepgraph>
    <innerclass refid="a00157" prot="public">otd_term</innerclass>
    <innerclass refid="a00161" prot="public">otd_logic</innerclass>
    <innerclass refid="a00165" prot="public">otd_session</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="a00062_1a6ecd9d8227b6ffde10eb2df05ae331e7" prot="public" static="no">
        <name>Py_LIMITED_API</name>
        <initializer>0x03020000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="25" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" prot="public" static="no">
        <name>ALL_ZERO</name>
        <initializer>{ 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="38" column="12" bodyfile="src/libopentracedecode-internal.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1a94b251bb20a6a503383239e41781b8e8" prot="public" static="no">
        <name>otd_spew</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(<ref refid="a00258_1aee80ec82069aab48dfe49df7c1e58b9aa15fdea0c29121fd82c4b5c830b80b84e" kindref="member">OTD_LOG_SPEW</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="114" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1abe0db3bab3b85f46343afb04b24d59a2" prot="public" static="no">
        <name>otd_dbg</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(<ref refid="a00258_1aee80ec82069aab48dfe49df7c1e58b9aa5b5f8932b106fd73676b1a1b647e38a2" kindref="member">OTD_LOG_DBG</ref>,  __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="115" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1a844f06b48c5ec39c2be21b5a80ad0a3c" prot="public" static="no">
        <name>otd_info</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(<ref refid="a00258_1aee80ec82069aab48dfe49df7c1e58b9aae4579c3bd1274dfbf8e6fe772c75aa09" kindref="member">OTD_LOG_INFO</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="116" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1a27487282ab8fa0ac93ef0640d85be767" prot="public" static="no">
        <name>otd_warn</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(<ref refid="a00258_1aee80ec82069aab48dfe49df7c1e58b9aac1b03ffc8f788454fae8c8e8066cba4d" kindref="member">OTD_LOG_WARN</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="117" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="a00062_1adfd45428ae0a51e6162ff442c97dbce7" prot="public" static="no">
        <name>otd_err</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(<ref refid="a00258_1aee80ec82069aab48dfe49df7c1e58b9aaa2835fe74f67cfd14919a140c1bc2e33" kindref="member">OTD_LOG_ERR</ref>,  __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="118" column="9" bodyfile="src/libopentracedecode-internal.h" bodystart="118" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="a00062_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba540d45fdd7158b54a31985f06b11b3d1" prot="public">
          <name>OTD_TERM_ALWAYS_FALSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55babafaf47e7c5fd048f5032b57e7720fae" prot="public">
          <name>OTD_TERM_HIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba6213a6c52d9c4bc4978d6a5858cfed62" prot="public">
          <name>OTD_TERM_LOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55baf255438cfe59bb66bd2dddbcb076d0a9" prot="public">
          <name>OTD_TERM_RISING_EDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9d8558d21c424031ce3980b236c29fea" prot="public">
          <name>OTD_TERM_FALLING_EDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9853f3adadace0f1f8922e0be7b088eb" prot="public">
          <name>OTD_TERM_EITHER_EDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55bafe2ffaa9933f13dc051f5877309e45f7" prot="public">
          <name>OTD_TERM_NO_EDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba4eb55bf5deff2672853013ccbf01fbc9" prot="public">
          <name>OTD_TERM_SKIP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="41" column="1" bodyfile="src/libopentracedecode-internal.h" bodystart="41" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <member refid="a00087_1gad8940cb716329201a468e14f3c75747e" kind="function"><name>otd_decoder_searchpath_add</name></member>
      <member refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kind="function"><name>otd_pd_output_callback_find</name></member>
      <member refid="a00085_1ga21cc0890d564bc0c72ee93bae8dbd773" kind="function"><name>otd_inst_start</name></member>
      <member refid="a00085_1ga4f385e5a752a33a538c128cb7335ff20" kind="function"><name>match_array_free</name></member>
      <member refid="a00085_1ga5a47265f727fbb1ec521a564d8f957d3" kind="function"><name>condition_list_free</name></member>
      <member refid="a00085_1ga16bc8c1ec4cbfaa9a3341af1a485cbf5" kind="function"><name>otd_inst_decode</name></member>
      <member refid="a00085_1ga6640c1503a8f6d1deaf87c344cf90225" kind="function"><name>process_samples_until_condition_match</name></member>
      <member refid="a00085_1ga8fb9318bbcbde31049c29877e75034ec" kind="function"><name>otd_inst_flush</name></member>
      <member refid="a00085_1ga59a9e52ee0d4444adf57fcf63ba508b2" kind="function"><name>otd_inst_send_eof</name></member>
      <member refid="a00085_1ga3a256fb72531757070ae05bac39bcb1c" kind="function"><name>otd_inst_terminate_reset</name></member>
      <member refid="a00085_1ga754b863cb710a4fdeecef5d70c8ee689" kind="function"><name>otd_inst_free</name></member>
      <member refid="a00085_1ga5a5ccf21d80fa12706ba83cffa3de267" kind="function"><name>otd_inst_free_all</name></member>
      <memberdef kind="function" id="a00062_1ab17d653a8298f3c1000819bb9203493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int otd_log</definition>
        <argsstring>(int loglevel, const char *format,...) G_GNUC_PRINTF(2</argsstring>
        <name>otd_log</name>
        <param>
          <type>int</type>
          <declname>loglevel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="111" column="14"/>
      </memberdef>
      <member refid="a00083_1ga5afcd8374bf693062436b716e60662a2" kind="function"><name>otd_decoder_apiver</name></member>
      <memberdef kind="function" id="a00062_1a4fad07f52157e88c715590c8b7e8778b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> PyObject *</type>
        <definition>OTD_PRIV PyObject * otd_Decoder_type_new</definition>
        <argsstring>(void)</argsstring>
        <name>otd_Decoder_type_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create the opentracedecode.Decoder type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The new type object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="124" column="19" bodyfile="src/type_decoder.c" bodystart="1230" bodyend="1255" declfile="src/libopentracedecode-internal.h" declline="124" declcolumn="19"/>
        <references refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" compoundref="a00062" startline="38">ALL_ZERO</references>
      </memberdef>
      <memberdef kind="function" id="a00062_1a32836f40cd48533652e96ed567b4c6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> const char *</type>
        <definition>OTD_PRIV const char * output_type_name</definition>
        <argsstring>(unsigned int idx)</argsstring>
        <name>output_type_name</name>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="125" column="21" bodyfile="src/type_decoder.c" bodystart="34" bodyend="46" declfile="src/libopentracedecode-internal.h" declline="125" declcolumn="21"/>
        <referencedby refid="a00088_1gac32b5d806af220243d84a95c7e655a00" compoundref="a00068" startline="393" endline="411">otd_pd_output_callback_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a1091d026b405fb0da592dc1574721e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> PyObject *</type>
        <definition>OTD_PRIV PyObject * otd_logic_type_new</definition>
        <argsstring>(void)</argsstring>
        <name>otd_logic_type_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="128" column="19" declfile="src/libopentracedecode-internal.h" declline="128" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1abc7bd38e0e284d3a3ba5e5e30ec3dfe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PyMODINIT_FUNC</type>
        <definition>PyMODINIT_FUNC PyInit_opentracedecode</definition>
        <argsstring>(void)</argsstring>
        <name>PyInit_opentracedecode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="131" column="16" declfile="src/libopentracedecode-internal.h" declline="131" declcolumn="16"/>
        <referencedby refid="a00087_1ga67fdfc4ec132b22cec05a0e7bc1ddd84" compoundref="a00053" startline="219" endline="322">otd_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a753884db4a1ce35a8792d39305e298b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> PyObject *</type>
        <definition>OTD_PRIV PyObject * py_import_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>py_import_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Import a Python module by name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is implemented in terms of PyImport_Import() rather than PyImport_ImportModule(), so that the import hooks are not bypassed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the module to load as UTF-8 string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Python module object, or NULL if an exception occurred. The caller is responsible for evaluating and clearing the Python error state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="135" column="19" bodyfile="src/util.c" bodystart="36" bodyend="55" declfile="src/libopentracedecode-internal.h" declline="135" declcolumn="19"/>
        <references refid="a00062_1a753884db4a1ce35a8792d39305e298b5" compoundref="a00047" startline="36" endline="55">py_import_by_name</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a753884db4a1ce35a8792d39305e298b5" compoundref="a00047" startline="36" endline="55">py_import_by_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a70c9b66cac4582972cabd780fa8196ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_attr_as_str</definition>
        <argsstring>(PyObject *py_obj, const char *attr, char **outstr)</argsstring>
        <name>py_attr_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python object&apos;s attribute, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="136" column="14" bodyfile="src/util.c" bodystart="70" bodyend="99" declfile="src/libopentracedecode-internal.h" declline="136" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a4adcc9f4d9248274355fe43b0b002371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_attr_as_strlist</definition>
        <argsstring>(PyObject *py_obj, const char *attr, GSList **outstrlist)</argsstring>
        <name>py_attr_as_strlist</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>GSList **</type>
          <declname>outstrlist</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python object&apos;s attribute, returned as a newly allocated GSList of char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstrlist</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to GSList of char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstrlist&apos; argument points to a GSList of g_malloc()ed strings upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="137" column="14" bodyfile="src/util.c" bodystart="115" bodyend="161" declfile="src/libopentracedecode-internal.h" declline="137" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</references>
        <references refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</references>
        <referencedby refid="a00083_1ga11b3869f9e65db787ad73c5c4ebddd2f" compoundref="a00059" startline="826" endline="1074">otd_decoder_load</referencedby>
        <referencedby refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_dictitem_as_str</definition>
        <argsstring>(PyObject *py_obj, const char *key, char **outstr)</argsstring>
        <name>py_dictitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="138" column="14" bodyfile="src/util.c" bodystart="176" bodyend="202" declfile="src/libopentracedecode-internal.h" declline="138" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_listitem_as_str</definition>
        <argsstring>(PyObject *py_obj, Py_ssize_t idx, char **outstr)</argsstring>
        <name>py_listitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python list item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the list item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="139" column="14" bodyfile="src/util.c" bodystart="217" bodyend="245" declfile="src/libopentracedecode-internal.h" declline="139" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" compoundref="a00047" startline="115" endline="161">py_attr_as_strlist</referencedby>
        <referencedby refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1ac5d5f089827945cee17bb3c1e3014d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_pydictitem_as_str</definition>
        <argsstring>(PyObject *py_obj, PyObject *py_key, char **outstr)</argsstring>
        <name>py_pydictitem_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>py_key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="140" column="14" bodyfile="src/util.c" bodystart="260" bodyend="294" declfile="src/libopentracedecode-internal.h" declline="140" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" compoundref="a00258" startline="70">OTD_ERR_ARG</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a4636183f49f3c2bbd94a41201d7d067a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_pydictitem_as_long</definition>
        <argsstring>(PyObject *py_obj, PyObject *py_key, int64_t *out)</argsstring>
        <name>py_pydictitem_as_long</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>py_key</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python dictionary item, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The dictionary to probe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="141" column="14" bodyfile="src/util.c" bodystart="308" bodyend="343" declfile="src/libopentracedecode-internal.h" declline="141" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebca0b8a159c5ce1e9d1e1d58384820a88d2" compoundref="a00258" startline="70">OTD_ERR_ARG</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" compoundref="a00047" startline="308" endline="343">py_pydictitem_as_long</references>
        <referencedby refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" compoundref="a00047" startline="308" endline="343">py_pydictitem_as_long</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a030a8367513df3651da4ff852a73b2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_str_as_str</definition>
        <argsstring>(PyObject *py_str, char **outstr)</argsstring>
        <name>py_str_as_str</name>
        <param>
          <type>PyObject *</type>
          <declname>py_str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>outstr</declname>
        </param>
        <briefdescription>
<para>Get the value of a Python unicode string object, returned as a newly allocated char *. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The unicode string object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outstr</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to char * storage to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. The &apos;outstr&apos; argument points to a g_malloc()ed string upon success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="142" column="14" bodyfile="src/util.c" bodystart="357" bodyend="386" declfile="src/libopentracedecode-internal.h" declline="142" declcolumn="14"/>
        <references refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" compoundref="a00062" startline="115">otd_dbg</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</references>
        <referencedby refid="a00083_1ga70c50e6acd942b4b3aedbc141c3cbf14" compoundref="a00059" startline="1086" endline="1121">otd_decoder_doc_get</referencedby>
        <referencedby refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" compoundref="a00047" startline="70" endline="99">py_attr_as_str</referencedby>
        <referencedby refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" compoundref="a00047" startline="176" endline="202">py_dictitem_as_str</referencedby>
        <referencedby refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" compoundref="a00047" startline="217" endline="245">py_listitem_as_str</referencedby>
        <referencedby refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" compoundref="a00047" startline="260" endline="294">py_pydictitem_as_str</referencedby>
        <referencedby refid="a00062_1a030a8367513df3651da4ff852a73b2aa" compoundref="a00047" startline="357" endline="386">py_str_as_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> int</type>
        <definition>OTD_PRIV int py_strseq_to_char</definition>
        <argsstring>(PyObject *py_strseq, char ***out_strv)</argsstring>
        <name>py_strseq_to_char</name>
        <param>
          <type>PyObject *</type>
          <declname>py_strseq</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>out_strv</declname>
        </param>
        <briefdescription>
<para>Convert a Python list of unicode strings to a C string vector. </para>
        </briefdescription>
        <detaileddescription>
<para>On success, a pointer to a newly allocated NUL-terminated array of allocated C strings is written to <emphasis>out_strv</emphasis>. The caller must g_free() each string and the array itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_strseq</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequence object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_strv</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of string vector to be filled in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OTD_OK upon success, a (negative) error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="143" column="14" bodyfile="src/util.c" bodystart="401" bodyend="464" declfile="src/libopentracedecode-internal.h" declline="143" declcolumn="14"/>
        <references refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" compoundref="a00062" startline="118">otd_err</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcabe3955617912cc0e8c0bd3f5e6f62bf7" compoundref="a00258" startline="69">OTD_ERR_MALLOC</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcaaecfc1f18b22e996112bec32462cb5d5" compoundref="a00258" startline="72">OTD_ERR_PYTHON</references>
        <references refid="a00258_1a375ed93b6afe588cc8c67b21318e7ebcafcf78f6457d3099b0fc89415a3f9eaa5" compoundref="a00258" startline="67">OTD_OK</references>
        <references refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" compoundref="a00047" startline="401" endline="464">py_strseq_to_char</references>
        <referencedby refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" compoundref="a00047" startline="401" endline="464">py_strseq_to_char</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a603e042a3820d61d96bac87805716706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> GVariant *</type>
        <definition>OTD_PRIV GVariant * py_obj_to_variant</definition>
        <argsstring>(PyObject *py_obj)</argsstring>
        <name>py_obj_to_variant</name>
        <param>
          <type>PyObject *</type>
          <declname>py_obj</declname>
        </param>
        <briefdescription>
<para>Convert a Python scalar object to a GLib variant. </para>
        </briefdescription>
        <detaileddescription>
<para>Supported variant types are string, int64 and double.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">py_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The Python object. Must not be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating reference to a new variant, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="144" column="19" bodyfile="src/util.c" bodystart="475" bodyend="518" declfile="src/libopentracedecode-internal.h" declline="144" declcolumn="19"/>
        <references refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" compoundref="a00062" startline="118">otd_err</references>
        <references refid="a00062_1a603e042a3820d61d96bac87805716706" compoundref="a00047" startline="475" endline="518">py_obj_to_variant</references>
        <referencedby refid="a00062_1a603e042a3820d61d96bac87805716706" compoundref="a00047" startline="475" endline="518">py_obj_to_variant</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1ae08773fa6217806eca48ddd813bde1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref> void</type>
        <definition>OTD_PRIV void otd_exception_catch</definition>
        <argsstring>(const char *format,...) G_GNUC_PRINTF(1</argsstring>
        <name>otd_exception_catch</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libopentracedecode-internal.h" line="155" column="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>libopentracedecode<sp/>project.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011<sp/>Uwe<sp/>Hermann<sp/>&lt;uwe@hermann-uwe.de&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2012<sp/>Bert<sp/>Vermeulen<sp/>&lt;bert@biot.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBSIGROKDECODE_LIBSIGROKDECODE_INTERNAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBSIGROKDECODE_LIBSIGROKDECODE_INTERNAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>stable<sp/>ABI<sp/>subset<sp/>as<sp/>per<sp/>PEP<sp/>384.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="a00062_1a6ecd9d8227b6ffde10eb2df05ae331e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_LIMITED_API<sp/>0x03020000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>First,<sp/>so<sp/>we<sp/>avoid<sp/>a<sp/>_POSIX_C_SOURCE<sp/>warning.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opentracedecode/libopentracedecode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Static<sp/>definition<sp/>of<sp/>tables<sp/>ending<sp/>with<sp/>an<sp/>all-zero<sp/>sentinel<sp/>entry</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>may<sp/>raise<sp/>warnings<sp/>when<sp/>compiling<sp/>with<sp/>-Wmissing-field-initializers.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>GCC<sp/>suppresses<sp/>the<sp/>warning<sp/>only<sp/>with<sp/>{<sp/>0<sp/>},<sp/>clang<sp/>wants<sp/>{<sp/>}<sp/>instead.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ALL_ZERO<sp/>{<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="a00062_1a0b081c5ecc0cff752f8ab51656dd605c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ALL_ZERO<sp/>{<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba540d45fdd7158b54a31985f06b11b3d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba540d45fdd7158b54a31985f06b11b3d1" kindref="member">OTD_TERM_ALWAYS_FALSE</ref>,</highlight></codeline>
<codeline lineno="43" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55babafaf47e7c5fd048f5032b57e7720fae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55babafaf47e7c5fd048f5032b57e7720fae" kindref="member">OTD_TERM_HIGH</ref>,</highlight></codeline>
<codeline lineno="44" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba6213a6c52d9c4bc4978d6a5858cfed62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba6213a6c52d9c4bc4978d6a5858cfed62" kindref="member">OTD_TERM_LOW</ref>,</highlight></codeline>
<codeline lineno="45" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55baf255438cfe59bb66bd2dddbcb076d0a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55baf255438cfe59bb66bd2dddbcb076d0a9" kindref="member">OTD_TERM_RISING_EDGE</ref>,</highlight></codeline>
<codeline lineno="46" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9d8558d21c424031ce3980b236c29fea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9d8558d21c424031ce3980b236c29fea" kindref="member">OTD_TERM_FALLING_EDGE</ref>,</highlight></codeline>
<codeline lineno="47" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9853f3adadace0f1f8922e0be7b088eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba9853f3adadace0f1f8922e0be7b088eb" kindref="member">OTD_TERM_EITHER_EDGE</ref>,</highlight></codeline>
<codeline lineno="48" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55bafe2ffaa9933f13dc051f5877309e45f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55bafe2ffaa9933f13dc051f5877309e45f7" kindref="member">OTD_TERM_NO_EDGE</ref>,</highlight></codeline>
<codeline lineno="49" refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba4eb55bf5deff2672853013ccbf01fbc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00062_1a06fc87d81c62e9abb8790b6e5713c55ba4eb55bf5deff2672853013ccbf01fbc9" kindref="member">OTD_TERM_SKIP</ref>,</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="a00157" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00157" kindref="compound">otd_term</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00157_1af451dc8e1d6e9b43e3c777daf7b3e52b" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="54" refid="a00157_1a3444f62e20ff604453335a4c5989d664" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00157_1a3444f62e20ff604453335a4c5989d664" kindref="member">channel</ref>;</highlight></codeline>
<codeline lineno="55" refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="a00157_1a265c433d35229d32f6a8b9d54bb954c4" kindref="member">num_samples_to_skip</ref>;</highlight></codeline>
<codeline lineno="56" refid="a00157_1a9e6b3919f45e9078174345beb03885cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="a00157_1a9e6b3919f45e9078174345beb03885cc" kindref="member">num_samples_already_skipped</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Custom<sp/>Python<sp/>types:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="a00161" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="63" refid="a00161_1a4310f067460ffaf0e8e3bcd4be1bada9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*<ref refid="a00161_1a4310f067460ffaf0e8e3bcd4be1bada9" kindref="member">di</ref>;</highlight></codeline>
<codeline lineno="64" refid="a00161_1adfb934cf013ccf6af32c949e96f36eb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="a00161_1adfb934cf013ccf6af32c949e96f36eb8" kindref="member">abs_start_samplenum</ref>;</highlight></codeline>
<codeline lineno="65" refid="a00161_1ac2c5a80a8d84186f67e8e9a5b2c94079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00161_1ac2c5a80a8d84186f67e8e9a5b2c94079" kindref="member">itercnt</ref>;</highlight></codeline>
<codeline lineno="66" refid="a00161_1ab66574ead2acb38776682f7ac587405d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="a00161_1ab66574ead2acb38776682f7ac587405d" kindref="member">inbuf</ref>;</highlight></codeline>
<codeline lineno="67" refid="a00161_1a9d0086a9fb1bd338473b814c548455e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="a00161_1a9d0086a9fb1bd338473b814c548455e9" kindref="member">inbuflen</ref>;</highlight></codeline>
<codeline lineno="68" refid="a00161_1a6103fda8a3a1512d6af835306acb1478" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*<ref refid="a00161_1a6103fda8a3a1512d6af835306acb1478" kindref="member">sample</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/><ref refid="a00161" kindref="compound">otd_logic</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="a00165" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00165" kindref="compound">otd_session</ref><sp/>{</highlight></codeline>
<codeline lineno="72" refid="a00165_1aa6b9b4c4d9005db087ef5e6b7feb3ea9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00165_1aa6b9b4c4d9005db087ef5e6b7feb3ea9" kindref="member">session_id</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>decoder<sp/>instances.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="a00165_1a5e1296e48d6a16e2a5fe2a574e9d93cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*<ref refid="a00165_1a5e1296e48d6a16e2a5fe2a574e9d93cc" kindref="member">di_list</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>frontend<sp/>callbacks<sp/>to<sp/>receive<sp/>decoder<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="a00165_1a808087341485199fe1513a76497fa0a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*<ref refid="a00165_1a808087341485199fe1513a76497fa0a6" kindref="member">callbacks</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>srd.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00087_1gad8940cb716329201a468e14f3c75747e" kindref="member">otd_decoder_searchpath_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>session.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a00137" kindref="compound">otd_pd_callback</ref><sp/>*<ref refid="a00088_1ga140539817e0ea7b3be6e63df92545d3c" kindref="member">otd_pd_output_callback_find</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00165" kindref="compound">otd_session</ref><sp/>*sess,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00137_1a709db7bad3db08a885de0200909ea285" kindref="member">output_type</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>instance.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga21cc0890d564bc0c72ee93bae8dbd773" kindref="member">otd_inst_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga4f385e5a752a33a538c128cb7335ff20" kindref="member">match_array_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga5a47265f727fbb1ec521a564d8f957d3" kindref="member">condition_list_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga16bc8c1ec4cbfaa9a3341af1a485cbf5" kindref="member">otd_inst_decode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_start_samplenum,<sp/>uint64_t<sp/>abs_end_samplenum,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*inbuf,<sp/>uint64_t<sp/>inbuflen,<sp/>uint64_t<sp/>unitsize);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga6640c1503a8f6d1deaf87c344cf90225" kindref="member">process_samples_until_condition_match</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di,<sp/>gboolean<sp/>*found_match);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga8fb9318bbcbde31049c29877e75034ec" kindref="member">otd_inst_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga59a9e52ee0d4444adf57fcf63ba508b2" kindref="member">otd_inst_send_eof</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga3a256fb72531757070ae05bac39bcb1c" kindref="member">otd_inst_terminate_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga754b863cb710a4fdeecef5d70c8ee689" kindref="member">otd_inst_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00113" kindref="compound">otd_decoder_inst</ref><sp/>*di);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00085_1ga5a5ccf21d80fa12706ba83cffa3de267" kindref="member">otd_inst_free_all</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00165" kindref="compound">otd_session</ref><sp/>*sess);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>log.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(G_OS_WIN32)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>On<sp/>MinGW,<sp/>we<sp/>need<sp/>to<sp/>specify<sp/>the<sp/>gnu_printf<sp/>format<sp/>flavor<sp/>or<sp/>GCC</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>will<sp/>assume<sp/>non-standard<sp/>Microsoft<sp/>printf<sp/>syntax.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loglevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__format__<sp/>(__gnu_printf__,<sp/>2,<sp/>3)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="a00062_1ab17d653a8298f3c1000819bb9203493c" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1ab17d653a8298f3c1000819bb9203493c" kindref="member">otd_log</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loglevel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)<sp/>G_GNUC_PRINTF(2,<sp/>3);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="a00062_1a94b251bb20a6a503383239e41781b8e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>otd_spew(...)<sp/><sp/><sp/>otd_log(OTD_LOG_SPEW,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="a00062_1abe0db3bab3b85f46343afb04b24d59a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>otd_dbg(...)<sp/><sp/><sp/><sp/>otd_log(OTD_LOG_DBG,<sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="a00062_1a844f06b48c5ec39c2be21b5a80ad0a3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>otd_info(...)<sp/><sp/><sp/>otd_log(OTD_LOG_INFO,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="a00062_1a27487282ab8fa0ac93ef0640d85be767" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>otd_warn(...)<sp/><sp/><sp/>otd_log(OTD_LOG_WARN,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="a00062_1adfd45428ae0a51e6162ff442c97dbce7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>otd_err(...)<sp/><sp/><sp/><sp/>otd_log(OTD_LOG_ERR,<sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>decoder.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="a00083_1ga5afcd8374bf693062436b716e60662a2" kindref="member">otd_decoder_apiver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="a00093" kindref="compound">otd_decoder</ref><sp/>*d);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>type_decoder.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>PyObject<sp/>*<ref refid="a00062_1a4fad07f52157e88c715590c8b7e8778b" kindref="member">otd_Decoder_type_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="a00062_1a32836f40cd48533652e96ed567b4c6c5" kindref="member">output_type_name</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>type_logic.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="a00062_1a1091d026b405fb0da592dc1574721e70" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>PyObject<sp/>*<ref refid="a00062_1a1091d026b405fb0da592dc1574721e70" kindref="member">otd_logic_type_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>module_opentracedecode.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="a00062_1abc7bd38e0e284d3a3ba5e5e30ec3dfe1" refkind="member"><highlight class="normal">PyMODINIT_FUNC<sp/><ref refid="a00062_1abc7bd38e0e284d3a3ba5e5e30ec3dfe1" kindref="member">PyInit_opentracedecode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">PyMODINIT_FUNC<sp/><ref refid="a00062_1abc7bd38e0e284d3a3ba5e5e30ec3dfe1" kindref="member">PyInit_opentracedecode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>util.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>PyObject<sp/>*<ref refid="a00062_1a753884db4a1ce35a8792d39305e298b5" kindref="member">py_import_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a70c9b66cac4582972cabd780fa8196ca" kindref="member">py_attr_as_str</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*attr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a4adcc9f4d9248274355fe43b0b002371" kindref="member">py_attr_as_strlist</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*attr,<sp/>GSList<sp/>**outstrlist);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a8ff6a75b56b4b1efa7cf3b7a0bde3b70" kindref="member">py_dictitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1af44148d9e53fcd3fa49df1268cc3ab46" kindref="member">py_listitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/>Py_ssize_t<sp/>idx,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1ac5d5f089827945cee17bb3c1e3014d99" kindref="member">py_pydictitem_as_str</ref>(PyObject<sp/>*py_obj,<sp/>PyObject<sp/>*py_key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a4636183f49f3c2bbd94a41201d7d067a" kindref="member">py_pydictitem_as_long</ref>(PyObject<sp/>*py_obj,<sp/>PyObject<sp/>*py_key,<sp/>int64_t<sp/>*out);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1a030a8367513df3651da4ff852a73b2aa" kindref="member">py_str_as_str</ref>(PyObject<sp/>*py_str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**outstr);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a00062_1aada9cd9c209f127bd43e0a4fd6413ed1" kindref="member">py_strseq_to_char</ref>(PyObject<sp/>*py_strseq,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***out_strv);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/>GVariant<sp/>*<ref refid="a00062_1a603e042a3820d61d96bac87805716706" kindref="member">py_obj_to_variant</ref>(PyObject<sp/>*py_obj);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>exception.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(G_OS_WIN32)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>On<sp/>MinGW,<sp/>we<sp/>need<sp/>to<sp/>specify<sp/>the<sp/>gnu_printf<sp/>format<sp/>flavor<sp/>or<sp/>GCC</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>will<sp/>assume<sp/>non-standard<sp/>Microsoft<sp/>printf<sp/>syntax.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00062_1ae08773fa6217806eca48ddd813bde1fd" kindref="member">otd_exception_catch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((__format__<sp/>(__gnu_printf__,<sp/>1,<sp/>2)));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="a00062_1ae08773fa6217806eca48ddd813bde1fd" refkind="member"><highlight class="normal"><ref refid="a00258_1a3a90167f4b0b0cb829b5b15e0663af50" kindref="member">OTD_PRIV</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00062_1ae08773fa6217806eca48ddd813bde1fd" kindref="member">otd_exception_catch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)<sp/>G_GNUC_PRINTF(1,<sp/>2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/libopentracedecode-internal.h"/>
  </compounddef>
</doxygen>
