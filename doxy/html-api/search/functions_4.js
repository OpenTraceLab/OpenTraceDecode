var searchData=
[
  ['print_5fspectrum_0',['print_spectrum',['../a00023.html#a31b2b39ab1664987712946f815a95563',1,'irmp.c']]],
  ['process_5fsamples_5funtil_5fcondition_5fmatch_1',['process_samples_until_condition_match',['../a00085.html#ga6640c1503a8f6d1deaf87c344cf90225',1,'instance.c']]],
  ['py_5fattr_5fas_5fstr_2',['py_attr_as_str',['../a00062.html#a70c9b66cac4582972cabd780fa8196ca',1,'util.c']]],
  ['py_5fattr_5fas_5fstrlist_3',['py_attr_as_strlist',['../a00062.html#a4adcc9f4d9248274355fe43b0b002371',1,'util.c']]],
  ['py_5fdictitem_5fas_5fstr_4',['py_dictitem_as_str',['../a00062.html#a8ff6a75b56b4b1efa7cf3b7a0bde3b70',1,'util.c']]],
  ['py_5fimport_5fby_5fname_5',['py_import_by_name',['../a00062.html#a753884db4a1ce35a8792d39305e298b5',1,'util.c']]],
  ['py_5flistitem_5fas_5fstr_6',['py_listitem_as_str',['../a00062.html#af44148d9e53fcd3fa49df1268cc3ab46',1,'util.c']]],
  ['py_5fobj_5fto_5fvariant_7',['py_obj_to_variant',['../a00062.html#a603e042a3820d61d96bac87805716706',1,'util.c']]],
  ['py_5fpydictitem_5fas_5flong_8',['py_pydictitem_as_long',['../a00062.html#a4636183f49f3c2bbd94a41201d7d067a',1,'util.c']]],
  ['py_5fpydictitem_5fas_5fstr_9',['py_pydictitem_as_str',['../a00062.html#ac5d5f089827945cee17bb3c1e3014d99',1,'util.c']]],
  ['py_5fstr_5fas_5fstr_10',['py_str_as_str',['../a00062.html#a030a8367513df3651da4ff852a73b2aa',1,'util.c']]],
  ['py_5fstrseq_5fto_5fchar_11',['py_strseq_to_char',['../a00062.html#aada9cd9c209f127bd43e0a4fd6413ed1',1,'util.c']]],
  ['pydoc_5fstrvar_12',['pydoc_strvar',['../a00080.html#aa6f491ca5e68da96d87ac1c0852ae9e5',1,'PyDoc_STRVAR(Decoder_put_doc, &quot;Put an annotation for the specified span of samples.\n&quot; &quot;\n&quot; &quot;Arguments: start and end sample number, stream id, annotation data.\n&quot; &quot;Annotation data&apos;s layout depends on the output stream type.&quot;):&#160;type_decoder.c'],['../a00080.html#a0260215ecc5e5fcca2a561b79994432b',1,'PyDoc_STRVAR(Decoder_register_doc, &quot;Register a new output stream.&quot;):&#160;type_decoder.c'],['../a00080.html#a5500c6975f291424482ae4900bbc86d1',1,'PyDoc_STRVAR(Decoder_wait_doc, &quot;Wait for one or more conditions to occur.\n&quot; &quot;\n&quot; &quot;Returns the sample data at the next position where the condition\n&quot; &quot;is seen. When the optional condition is missing or empty, the next\n&quot; &quot;sample number is used. The condition can be a dictionary with one\n&quot; &quot;condition&apos;s details, or a list of dictionaries specifying multiple\n&quot; &quot;conditions of which at least one condition must be true. Dicts can\n&quot; &quot;contain one or more key/value pairs, all of which must be true for\n&quot; &quot;the dict&apos;s condition to be considered true. The key either is a\n&quot; &quot;channel index or a keyword, the value is the operation&apos;s parameter.\n&quot; &quot;\n&quot; &quot;Supported parameters for channel number keys: &apos;h&apos;, &apos;l&apos;, &apos;r&apos;, &apos;f&apos;,\n&quot; &quot;or &apos;e&apos; for level or edge conditions. Other supported keywords:\n&quot; &quot;&apos;skip&apos; to advance over the given number of samples.\n&quot;):&#160;type_decoder.c'],['../a00080.html#a1108ee813fc6db469aae7e005eff6b75',1,'PyDoc_STRVAR(Decoder_has_channel_doc, &quot;Check whether input data is supplied for a given channel.\n&quot; &quot;\n&quot; &quot;Argument: A channel index.\n&quot; &quot;Returns: A boolean, True if the channel is connected,\n&quot; &quot;False if the channel is open (won&apos;t see any input data).\n&quot;):&#160;type_decoder.c'],['../a00080.html#abac60368e3459ef7abdef8c18afa5080',1,'PyDoc_STRVAR(Decoder_doc, &quot;sigrok Decoder base class&quot;):&#160;type_decoder.c']]],
  ['pyinit_5fopentracedecode_13',['PyInit_opentracedecode',['../a00062.html#abc7bd38e0e284d3a3ba5e5e30ec3dfe1',1,'libopentracedecode-internal.h']]]
];
